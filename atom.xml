<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小曾博客</title>
  
  <subtitle>IT Boy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaozeng26.github.io/"/>
  <updated>2021-03-24T14:03:10.661Z</updated>
  <id>https://xiaozeng26.github.io/</id>
  
  <author>
    <name>小曾</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git的常用命令</title>
    <link href="https://xiaozeng26.github.io/2021/03/24/Git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://xiaozeng26.github.io/2021/03/24/Git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-03-24T13:55:47.000Z</published>
    <updated>2021-03-24T14:03:10.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git的常用命令"><a href="#Git的常用命令" class="headerlink" title="Git的常用命令"></a>Git的常用命令</h1><h2 id="1-新建代码库"><a href="#1-新建代码库" class="headerlink" title="1. 新建代码库"></a>1. 新建代码库</h2><ul><li>git init  # 在当前目录新建一个Git代码库</li><li>git init [project-name] # 新建一个目录，将其初始化为Git代码库</li><li>git clone [url] # 克隆项目到本地</li></ul><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li><p>git config –list # 显示当前的Git配置</p></li><li><p>git config -e [–global] # 编辑Git的配置文件</p></li><li><p>提交代码时的用户信息</p><p>git config [–global] user.name “[name]”</p><p>git config [–global] user.email “[email address]”</p></li></ul><h2 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3. 增加/删除文件"></a>3. 增加/删除文件</h2><ul><li>git add [file1] [file2] … # 添加指定文件到暂存区</li><li>git add [dir] # 添加指定目录到暂存区，包括子目录。</li><li>git add . # 将当前目录的所有文件加入暂存区</li><li>git add -p # 对于同一个文件的多处变化，可以实现多次提交</li><li>git rm [file1] [file2] … # 删除工作区的文件，并且这次删除放入暂存区。</li><li>git rm –cached [file] # 停止追踪指定文件，但该文件会保留在暂存区。</li><li>git mv [file-original] [file-renamed] # 改名文件，并将这个改名文件放入暂存区。</li></ul><h2 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4. 代码提交"></a>4. 代码提交</h2><ul><li>git commit -m [message] # 提交暂存区到本地仓库</li><li>git commit [file1] [file2] … -m [message] # 提交暂存区的指定文件到仓库</li><li>git commit -a # 提交工作区自上次commit之后的变化，直接到本地库</li><li>git commit -v # 提交时显示所有diff信息</li><li>git commit –amend -m [message] # 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息。</li><li>git commit –amend [file1] [file2] … # 重做上一次commit，并包括指定文件的新变化</li></ul><h2 id="5-分支"><a href="#5-分支" class="headerlink" title="5. 分支"></a>5. 分支</h2><ul><li><p>git branch # 列出所有本地分支</p></li><li><p>git branch -r 列出所有远程分支</p></li><li><p>git branch -a 列出所有本地分支和远程分支</p></li><li><p>git branch [branch-name]  # 新建一个分支，但依然停留在当前分支</p></li><li><p>git checkout -b [branch] # 新建一个分支，并切换到该分支</p></li><li><p>git branch [branch] [commit] # 新建一个分支，指向指定commit</p></li><li><p>git branch –track [branch] [remote-branch] # 新建一个分支，与指定的远程分支建立追踪关系</p></li><li><p>git checkout [branch-name] # 切换到指定分支，并更新工作区。</p></li><li><p>git checkout - # 切换到上一个分支</p></li><li><p>git branch –set-upstream [branch] [remote-branch] # 建立追踪关系，在现有分支与指定的远程分支之间。</p></li><li><p>git merge [branch] # 合并指定分支到当前分支</p></li><li><p>git cherry-pick [commit] # 选择一个commit，合并进当前分支</p></li><li><p>git branch -d [branch-name] # 删除分支</p></li><li><p>删除远程分支</p><p>git push origin –delete [branch-name]</p><p>git branch -dr [remote/branch]</p></li><li><p>git stash # 保存快照</p></li><li><p>git stash list # 查看快照清单</p></li><li><p>git stash pop stash@{x} # 恢复某个快照</p></li></ul><h2 id="6-标签"><a href="#6-标签" class="headerlink" title="6. 标签"></a>6. 标签</h2><ul><li>git tag # 列出所有tag</li><li>git tag [tag] 新建一个tag在当前commit</li><li>git tag [tag] [commit] # 新建一个tag在指定commit</li><li>git tag  -d [tag] 删除本地tag</li><li>git push origin :refs/tags/[tagName]</li><li>git show [tag] # 查看tag信息</li><li>git push [remote] [tag] # 提交指定tag</li><li>git push [remote] –tags  # 提交所有tag</li><li>git checkout -b [branch] [tag] # 新建一个分支，指向某个tag</li></ul><h2 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7. 查看信息"></a>7. 查看信息</h2><ul><li><p>git status # 显示有变更的文件</p></li><li><p>git log # 显示当前分支的版本历史</p></li><li><p>git log –stat # 显示commit历史，以及每次commit发生变更的文件</p></li><li><p>git log -S [keyword] # 搜索提交历史，根据关键字</p></li><li><p>git log [tag] HEAD –pretty=format:%s # 显示某个commit之后的所有变动，每个commit占据一行</p></li><li><p>git log [tag] HEAD –grep feature # 显示某个commit之后的所有变动，其”提交说明” 必须符合搜索条件</p></li><li><p>git log –follow [file] </p><p>git whatchanged [file] # 显示某个文件的版本历史，包括文件改名</p></li><li><p>git log -p [file] # 显示指定文件相关的每一次diff</p></li><li><p>git log -5 –pretty –oneline # 显示过去5次提交</p></li><li><p>git shortlog -sn # 显示所有提交过的用户，按提交次数排序</p></li><li><p>git blame [file] # 显示指定文件是什么人在什么时间修改过</p></li><li><p>git diff # 显示暂存区和工作区的差异</p></li><li><p>git diff –cached [file] # 显示暂存区和上一个commit的差异</p></li><li><p>git diff HEAD # 显示工作区与当前分支最新commit之间的差异</p></li><li><p>git diff [first-branch] …[second-branch] # 显示两次提交的差异</p></li><li><p>git diff –shortstat “@{0 day ago}” # 显示今天你写了多少行代码</p></li><li><p>git show [commit] # 显示某次提交的元数据和内容变化</p></li><li><p>git show –name-only [commit] # 显示某次提交发生变化的文件</p></li><li><p>git show [commit]:[filename] # 显示某次提交时，某个文件的内容</p></li><li><p>git reflog # 显示当前分支的最近几次提交</p></li><li><p>git reset –hard id # 回滚至Id版本次提交</p><p>​                –soft # 若回到第二次提交，第三次将回到暂存区</p><p>​                –mixed # 若回到第二次提交，第三次提交回到工作区 </p></li><li><p>git reset HEAD xxx # 暂存区回到工作区</p></li><li><p>git checkout -b hotfix master # 从master创建新的hotfix分支</p></li><li><p>git checkout – file # 对file文件修改后，丢弃工作区内容</p></li><li><p>git reset HEAD 或者git reset HEAD^ 返回上一步或上上步</p><p>git checkout – file  改乱工作区某文件，并已加入暂存区，此时想丢弃暂存区内容，即可用上面两步</p></li></ul><h2 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8. 远程同步"></a>8. 远程同步</h2><ul><li>git remote -v # 显示所有远程仓库</li><li>git remote show [remote] # 显示某个远程仓库的信息</li><li>git remote add [shortname] [url] # 添加一个新的远程仓库，并命名</li><li>git pull [remote] [branch] # 拉去远程仓库，并与本地分支合并</li><li>git push [remote] [branch] # 推送本地仓库到远程</li><li>git push [remote] –force # 强行推送当前分支到远程仓库</li><li>git push [remote] –all # 推送所有分支到远程仓库</li></ul><h2 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9. 撤销"></a>9. 撤销</h2><ul><li>git checkout [file] # 丢弃工作区的的修改</li><li>git checkout [commit] [file] # 撤销某个commit的指定文件到暂存区和工作区</li><li>git checkout . # 恢复暂存区的所有文件到工作区</li><li>git reset [file] # 返回指定文件的上一版本</li><li>git reset –hard id # 重置暂存区和工作区，与上一次commit保持一致。</li><li>git stash # 快照</li><li>git stash list # 显示快照清单</li><li>git stash pop  @stash{..} # 恢复快照</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Git" scheme="https://xiaozeng26.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Feign接口调用的介绍与实现</title>
    <link href="https://xiaozeng26.github.io/2021/03/20/Feign%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaozeng26.github.io/2021/03/20/Feign%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-03-20T11:50:47.000Z</published>
    <updated>2021-03-27T07:08:37.103Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-使用Feign调用服务接口"><a href="#1-使用Feign调用服务接口" class="headerlink" title="1. 使用Feign调用服务接口"></a>1. 使用Feign调用服务接口</h1><p>在Java中，进行项目开发基本都是模块划分，划分模块之后，就需要进行接口的调用。那么该如何进行接口的调用呢？？</p><ul><li><p>HttpClient</p><p>HttpClient提供了高效的、最新的、功能丰富的支持Http协议的客户端编程工具包。</p><p>HttpClient相比传统JDK自带的URLConnection，提升了易用性和灵活性，使客户端发送HTTP请求变得容易，提高了开发的效率。</p></li><li><p>OkHttp</p><p>一个处理网络请求的开源项目，是安卓端最火的轻量级框架，OkHttp拥有简洁的API、高效的性能，并支持多种协议(Http和SPDY)。</p></li><li><p>HttpURLConnection</p><p>HttpURLConnection 是Java的标准类，它继承自URLConnection，可用于向网站发送GET请求、POST请求。HttpURLConnection使用比较复杂，不像HttpClient那样容易使用。</p></li><li><p>RestTemplate</p><p>RestTemplate 是Spring 提供的用于访问Rest 服务的客户端，RestTemplate提供了多种便捷访问远程Http 服务的方法，能够大大提高客户端的编写效率。</p></li></ul><p>上面介绍了最常见的几种接口调用方法，下面要介绍的Feign更加简单、方便。</p><p>Feign 是一个声明式的REST客户端，它能够让REST调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。</p><p>Feign会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。</p><p>并且，Feign可以与Eureka 和Ribbon组合使用以支持负载均衡。</p><h2 id="1-1-在-Spring-Cloud-中集成Feign"><a href="#1-1-在-Spring-Cloud-中集成Feign" class="headerlink" title="1.1 在 Spring Cloud 中集成Feign"></a>1.1 在 Spring Cloud 中集成Feign</h2><p>下面通过一个简单的案例去描述Feign接口调用的一个简单过程：</p><p>需求：</p><p>将模块feign-interface和feign-invoke注册到注册中心，在feign-invoke模块中调用feign-interface中的接口。</p><p>首先需要创建一个模块eureka-server作为注册中心，并配置上security的安全框架。因为在我博客上已经写有Eureka服务注册中心的相关搭建，这里就简单将位置列出来即可，若感兴趣可以进入博客详细学习：<a href="http://www.zeng26.com" target="_blank" rel="noopener">小曾博客</a>。</p><p>eureka-server:</p><p><img src="/img/springcloud/feign/eureka-server.png" alt=""></p><p>pom.xml:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencyManagement&gt;</span><br><span class="line">       &lt;dependencies&gt;</span><br><span class="line">           &lt;dependency&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">               &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">               &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">           &lt;/dependency&gt;</span><br><span class="line">       &lt;/dependencies&gt;</span><br><span class="line">   &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>application.properties配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端口</span><br><span class="line">server.port=<span class="number">8010</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=eureka-server</span><br><span class="line"></span><br><span class="line"># 此应用为注册中心，false：不向注册中心注册自己。</span><br><span class="line">eureka.client.register-with-eureka = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># 注册中心职责是维护服务实例，false：不检索服务。</span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8010/eureka/</span></span><br><span class="line"></span><br><span class="line"># spring-security的配置信息：</span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#eureka.instance.prefer-ip-address=true</span><br><span class="line"></span><br><span class="line"># eureka.instance.status-page-url=www.baidu.com</span><br><span class="line"></span><br><span class="line">eureka.server.enableSelfPreservation=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>因为会集成Spring Security，所以在配置文件中必须添加下面两行代码,不添加的话会报401的权限错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># spring-security的配置信息：</span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.eurekaserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是Security的相关配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.eurekaserver.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line">        <span class="comment">//关闭csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//支持httpBasic</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，Eureka-server注册中心就搭建成功了，启动项目，访问<a href="http://localhost:8010即可登录Eureka的Web页面。">http://localhost:8010即可登录Eureka的Web页面。</a></p><p>下面就是进入feign的正式学习：</p><p>在Spring Cloud 中集成Feign 的步骤相当简单，首先还是创建项目feign-interface，并加入相关的依赖，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line"> &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependencyManagement&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">       &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">       &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line"> &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.2.0.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>编写application.propeties配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端口</span><br><span class="line">server.port=<span class="number">8088</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=feign-<span class="class"><span class="keyword">interface</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># <span class="title">Eureka</span>注册中心地址</span></span><br><span class="line"><span class="class"><span class="title">eureka</span>.<span class="title">client</span>.<span class="title">service</span>-<span class="title">url</span>.<span class="title">defaultZone</span></span>=http:<span class="comment">//xiaozeng:123456@localhost:8010/eureka/</span></span><br><span class="line"></span><br><span class="line"># 使用IP注册</span><br><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"># 定义实例ID格式</span><br><span class="line">eureka.instance.instance-id=$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line"></span><br><span class="line">eureka.instance.status-page-url=http:<span class="comment">//www.baidu.com</span></span><br><span class="line"></span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableFeignClients</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FeignInterfaceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignInterfaceApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类上添加@EnableFeignClients注解，如果你的Feign接口定义跟你启动类不在同一包名下，还需要制定扫描的包名@EnableFeignClients(basePackages=”com.self.xxxx”)。在上面的@SpringBootApplication注解中排除了org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class ，是为了解决Security的一个权限问题，如果不排除这个自动配置，将会报401的权限问题。</p><p>因为是将这个模块注册到Eureka注册中心，然后客户端调用带模块的接口返回数据，所以必须在此模块中创建相应的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Welcome to Study Feign~~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这里，启动Eureka注册中心，和feign-interface就可以将模块注册进注册中心。</p><p><img src="/img/springcloud/feign/register_8088.png" alt=""></p><p>上面的步骤就是创建一个注册中心，并且将服务接口提供者已经注册到了注册中心，那么，既然已经有了服务的提供者，那么必须要有人去使用把？？所以下面咱就来创建feign-invoke模块调用服务提供者提供的接口：</p><p>pom.xml : </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.0.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>application.properties配置文件 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端口</span><br><span class="line">server.port=<span class="number">8099</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=feign-invoke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Eureka注册中心地址</span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//xiaozeng:123456@localhost:8010/eureka/</span></span><br><span class="line"></span><br><span class="line"># 使用IP注册</span><br><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"># 定义实例ID格式</span><br><span class="line">eureka.instance.instance-id=$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line"></span><br><span class="line">eureka.instance.status-page-url=http:<span class="comment">//www.baidu.com</span></span><br><span class="line"></span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们写到这，服务调用者的基本配置已经完成。启动项目就可以将模块注册进注册中心:</p><p><img src="/img/springcloud/feign/register_8099.png" alt=""></p><p>如果需要调用服务提供者提供的接口，那么在调用端这里必须要获取提供者暴露出来的接口信息，因此需要在调用端创建一个DemoRemoteClient接口，标识一下服务提供者暴露的接口路径等信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"feign-interface"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们可以测试一下，使用调用端的DemoRemoteClient对象调用服务提供者提供的hello接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.feign.client.DemoRemoteClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoRemoteClient demoRemoteClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/callHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = demoRemoteClient.hello();</span><br><span class="line">        System.out.println(<span class="string">"远程调用结果："</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当模块都启动后，访问<a href="http://localhost:8099/callHello时，由于配置了Spring" target="_blank" rel="noopener">http://localhost:8099/callHello时，由于配置了Spring</a> Security的原因，所以需要将配置文件的用户名密码填写登录才可以访问：</p><p><img src="/img/springcloud/feign/login.png" alt=""></p><p>登录后可以发现页面返回数据：</p><p><img src="/img/springcloud/feign/access_sucess.png" alt=""></p><p>控制台也会有对应的输出：</p><p><img src="/img/springcloud/feign/print_console.png" alt=""></p><p><strong>【注意：在客户端（服务调用者）接口上加@FeignClient注解，就相当于标识这是一个Feign客户端，value的属性就是对应的服务名称，也就是你需要调用那个服务的接口。】</strong></p><p><strong>定义方法时直接复制接口的定义即可，这样做的好处就是，每写一个接口就要对应写一个调用的Client，后面打成公共的jar，这样无论是哪个项目需要调用接口，只要引入公共的接口SDK jar 即可，不用重新定义一遍了。</strong></p><h1 id="2-Feign自定义配置"><a href="#2-Feign自定义配置" class="headerlink" title="2. Feign自定义配置"></a>2. Feign自定义配置</h1><p>Feign提供了很多的的扩展机制，让用户可以更加灵活的使用，下面就一起来学习Feign的一些自定义配置。</p><h2 id="2-1-日志配置"><a href="#2-1-日志配置" class="headerlink" title="2.1 日志配置"></a>2.1 日志配置</h2><p>在进行接口调用时，比如接口调用失败，参数没收到等问题，或者想看看调用的性能，就需要配置Feign的日志，让Feign把请求信息输出出来。</p><p>首先定义一个配置类，获取日志级别，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign 的Level日志级别有4种，分别是：</p><ul><li>NONE：不输出日志。</li><li>BASIC：只输出请求方法的URL和响应的状态码以及接口执行的时间。</li><li>HEADERS：将BASIC信息和请求头信息输出。</li><li>FULL：输出完整的请求信息。</li></ul><p>配置类建好后，我们需要在Feign Client（服务调用方）中的@FeignClient注解中指定使用的配置类，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.feign.config.FeignConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"feign-interface"</span>,configuration = FeignConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Component</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DemoRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中执行Client的日志级别才能正确的输出日志，格式是”logging.level.client类地址=级别”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.self.feign.client.DemoRemoteClient=DEBUG</span><br></pre></td></tr></table></figure><p>最后，通过Feign的客户端8099端口去调用/callHello,就可以看到控制台输出的调用信息，如下图:</p><p><img src="/img/springcloud/feign/feignLogger.png" alt=""></p><h2 id="2-2-契约配置"><a href="#2-2-契约配置" class="headerlink" title="2.2 契约配置"></a>2.2 契约配置</h2><p>其实，原生的Feign是不支持Spring MVC注解的，只是因为Spring Cloud 在Feign的基础上做了扩展，才使Feign支持Spring MVC的注解来调用。</p><p>如果你想在Spring Cloud中使用原生的注解方式来定义客户端也是可以的，通过配置契约来改变这个配置，Spring Cloud中默认的是SpringMvcContract，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Contract;</span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contract.Default();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当配置了默认契约之后，之前定义的Client就用不了了，因为之前上面的注解都是Spring MVC的注解。</p><p>效果如下图：</p><p><img src="/img/springcloud/feign/contract.png" alt=""></p><h2 id="2-3-Basic-认证配置"><a href="#2-3-Basic-认证配置" class="headerlink" title="2.3 Basic 认证配置"></a>2.3 Basic 认证配置</h2><p>通常我们调用的接口都是有权限控制的，很多时候可能认证的值是通过参数去传递的，还有就是通过请求头去传递认证信息，比如Basic认证方式。在Feign中我们可以直接配置Basic认证，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"user"</span>, <span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者你可以自定义属于自己的认证方式，其实就是自定义一个请求拦截器。在请求之前做认证操作，然后往请求头中设置认证之后的信息。通过实现RequestIntercepter接口来自定义认证方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.feign.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignBasicAuthRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FeignBasicAuthRequestInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入请求拦截,用户名密码认证~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将配置改成我们自定义的就可以了，这样当Feign去请求接口的时候，每次请求之前都会进入FeignBasicAuthRequestInterceptor的apply方法中，在在里面就可以做属于你的逻辑了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FeignBasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FeignBasicAuthRequestInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试去访问8099下的callHello接口后，控制台会输出以下结果：</p><p><img src="/img/springcloud/feign/basic.png" alt=""></p><h2 id="2-4-超时时间配置"><a href="#2-4-超时时间配置" class="headerlink" title="2.4 超时时间配置"></a>2.4 超时时间配置</h2><p>通过Options可以配置连接超时时间和读取超时时间（代码如下），Options的第一个参数是连接超时时间（ms）,默认值是10 × 1000；第二个是读取超时时间（ms）,默认值是60 × 1000。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Request.<span class="function">Options <span class="title">options</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Request.Options(<span class="number">5000</span>, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-客户端组件配置"><a href="#2-5-客户端组件配置" class="headerlink" title="2.5 客户端组件配置"></a>2.5 客户端组件配置</h2><p>Feign中默认使用JDK原生的URLConnection发送HTTP请求，我们可以集成别的组件来替换掉URLConnection，比如Apache HttpClient,OkHttp。</p><p>配置 OkHttp 只需要加入OkHttp 的依赖，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后修改配置，将Feign的 HttpClient 禁用，启用OkHttp,配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#feign 使用 okhttp</span><br><span class="line">feign.httpclient.enabled=<span class="keyword">false</span></span><br><span class="line">feign.okhttp.enabled=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>关于配置可参考源码org.springframework.cloud.openfeign.FeignAutoConfiguration。</p><p>HttpClient自动配置源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ApacheHttpClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ConditionalOnMissingClass("com.netflix.loadbalancer.ILoadBalancer")</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"feign.httpclient.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientFeignConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> HttpClient httpClient;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(Client<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Client</span> <span class="title">feignClient</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApacheHttpClient(<span class="keyword">this</span>.httpClient);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApacheHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OkHttp 自动配置源码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(OkHttpClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ConditionalOnMissingClass("com.netflix.loadbalancer.ILoadBalancer")</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"feign.okhttp.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpFeignConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> okhttp3.OkHttpClient okHttpClient;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(Client<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Client</span> <span class="title">feignClient</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.okHttpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient(<span class="keyword">this</span>.okHttpClient);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面所示两段代码分别是配置 HttpClient 和 OkClient 的方法。其通过@ConditionalOnProperty中的值来决定启用哪种客户端（HTTPClient 和 OkHttp），@ConditionalOnClass 表示对应的类在 classpath 目录下存在时，才会去解析对应的配置文件。</p><h2 id="2-6-使用配置自定义Feign-的配置"><a href="#2-6-使用配置自定义Feign-的配置" class="headerlink" title="2.6 使用配置自定义Feign 的配置"></a>2.6 使用配置自定义Feign 的配置</h2><p>除了使用代码的方式来对Feign进行配置，我们还可以通过配置文件的方式来指定 Feign 的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 连接超时时间</span><br><span class="line">feign.client.config.feignName.connectTimeout=<span class="number">5000</span></span><br><span class="line"># 读取超时时间</span><br><span class="line">feign.client.config.feignName.readTimeout=<span class="number">5000</span></span><br><span class="line"># 日志等级</span><br><span class="line">feign.client.config.feignName.loggerLevel=full</span><br><span class="line"># 重试</span><br><span class="line">feign.client.config.feignName.retryer=com.xxx.xxxRetryer</span><br><span class="line"># 拦截器</span><br><span class="line">feign.client.config.feignName.requestInterceptors[<span class="number">0</span>]=com.xxx.xxxRequestInterceptor</span><br><span class="line">feign.client.config.feignName.requestInterceptors[<span class="number">1</span>]=com.xxx.xxxRequestInterceptor</span><br><span class="line"># 编码器</span><br><span class="line">feign.client.config.feignName.encoder=com.xxx.xxxEncoder</span><br><span class="line"># 解码器</span><br><span class="line">feign.client.config.feignName.decoder=com.xxx.xxxDecoder</span><br><span class="line"># 契约</span><br><span class="line">feign.client.config.feignName.contract=com.xxx.xxxContract</span><br></pre></td></tr></table></figure><h2 id="2-7-继承特性"><a href="#2-7-继承特性" class="headerlink" title="2.7 继承特性"></a>2.7 继承特性</h2><p>Feign 的继承特性可以让服务的接口定义单独抽出来，作为公关的依赖，以方便使用。</p><p>创建一个 Maven 项目，feign-inherit-api，用于存放API接口的定义，增加Feign 的依赖，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>定义接口，指定服务名称，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"feign-inherit-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/name"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个服务提供者feign-inherit-provider，引入feign-inherit-api，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.biancheng&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-inherit-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>实现UserRemoteClient 接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">implements</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xiaozeng"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个服务消费者feign-inherit-consumer，同样需要引入feign-inherit-api，用于调用feign-inherit-provider提供的/user/name 接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRemoteClient userRemoteClient;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/call"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = userRemoteClient.getName();</span><br><span class="line">        System.out.println(<span class="string">"getName调用结果："</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将接口的定义单独抽取出来，服务提供者去实现接口，服务消费者直接就可以引入定义好的接口进行调用，非常方便。</p><h2 id="2-8-多参数请求构造"><a href="#2-8-多参数请求构造" class="headerlink" title="2.8 多参数请求构造"></a>2.8 多参数请求构造</h2><p>多参数请求构造分为GET 请求 和POST 请求两种方式，首先来看GET请求的多参数请求构造方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/info"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name,@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span><span class="keyword">int</span> age)</span>;</span><br></pre></td></tr></table></figure><p>另一种是通过Map来传递参数，参数数量可以动态的改变，个人是不建议使用Map进行传参的（Map传递参数最大的问题就是可以随意传参）。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/detail"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserDetail</span><span class="params">(@RequestParam Map&lt;String, Object&gt; param)</span></span>;</span><br></pre></td></tr></table></figure><p>POST 请求多参数就定义一个参数类，通过@RequestBody 注解的方式来实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody User user)</span></span>;</span><br></pre></td></tr></table></figure><p>实现类中也需要加上@RequestBody 注解，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【注意：使用继承特性的时候，实现类也需要加上@RequestBody 注解】。</strong></p><p>至此，Feign的基本使用已经结束……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="SpringCloud" scheme="https://xiaozeng26.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Ribbon的介绍及使用</title>
    <link href="https://xiaozeng26.github.io/2021/03/13/Ribbon%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaozeng26.github.io/2021/03/13/Ribbon%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-13T06:58:51.000Z</published>
    <updated>2021-03-20T11:32:12.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Spring-Cloud-Ribbon-负载均衡-介绍及使用"><a href="#1-Spring-Cloud-Ribbon-负载均衡-介绍及使用" class="headerlink" title="1. Spring Cloud Ribbon(负载均衡)介绍及使用"></a>1. Spring Cloud Ribbon(负载均衡)介绍及使用</h1><p>目前主流的负载均衡方案分两种：</p><ul><li>集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载均衡，比如Nginx。</li><li>客户端自己做负载均衡，根据自己的请求情况做负载，Ribbon就属于客户端自己做负载。</li></ul><p>Spring Cloud Ribbon是一个基于 HTTP 和 TCP 的客户端负载均衡工具，它基于Netflix Ribbon 实现。通过Spring Cloud的封装，可以让我们轻松的将面向服务的REST模板请求自动转换成客户端负载均衡的服务调用。</p><h2 id="1-1-Ribbon模块"><a href="#1-1-Ribbon模块" class="headerlink" title="1.1 Ribbon模块"></a>1.1 Ribbon模块</h2><p>Ribbon模块介绍如下表：</p><table><thead><tr><th align="center">名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ribbon-loadBalancer</td><td align="center">负载均衡模块，可以独立使用，也可以和别的模块一起使用</td></tr><tr><td align="center">Ribbon</td><td align="center">内置的负载均衡算法都实现在其中</td></tr><tr><td align="center">ribbon-eureka</td><td align="center">基于Eureka封装的模块，能够快速、方便地集成Eureka</td></tr><tr><td align="center">ribbon-transport</td><td align="center">基于Netty实现多协议的支持，比如HTTP、TCP、UDP等</td></tr><tr><td align="center">ribbon-HTTPClient</td><td align="center">基于HTTPClient封装的REST客户端，集成了负载均衡模块，可以直接在项目中使用来调用接口</td></tr><tr><td align="center">ribbon-example</td><td align="center">Ribbon使用代码示例，通过这些示例学习可以事半功倍</td></tr><tr><td align="center">ribbon-core</td><td align="center">核心且通用的代码，客户端API的一些配置和其他API的定义</td></tr></tbody></table><h2 id="1-2-Ribbon的使用"><a href="#1-2-Ribbon的使用" class="headerlink" title="1.2 Ribbon的使用"></a>1.2 Ribbon的使用</h2><p>进行Ribbon负载均衡的使用测试，首先需要创建搭建Eureka平台，并搭建两个客户端模块接口注册进Eureka注册中心，两个接口的端口分别是8081、8082。</p><p><strong>创建Eureka注册中心：</strong></p><p>首先，创建一个模块eureka-server，相关的依赖如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencyManagement&gt;</span><br><span class="line">       &lt;dependencies&gt;</span><br><span class="line">           &lt;dependency&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">               &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">               &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">           &lt;/dependency&gt;</span><br><span class="line">       &lt;/dependencies&gt;</span><br><span class="line">   &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>接着编写application.properties配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端口</span><br><span class="line">server.port=<span class="number">8010</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=eureka-server</span><br><span class="line"></span><br><span class="line"># 此应用为注册中心，false：不向注册中心注册自己。</span><br><span class="line">eureka.client.register-with-eureka = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># 注册中心职责是维护服务实例，false：不检索服务。</span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8010/eureka/</span></span><br><span class="line"></span><br><span class="line"># spring-security的配置信息：</span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#eureka.instance.prefer-ip-address=true</span><br><span class="line"></span><br><span class="line"># eureka.instance.status-page-url=www.baidu.com</span><br><span class="line"></span><br><span class="line">eureka.server.enableSelfPreservation=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>其中，spring.security.user.name和spring.security.user.password是使用了Security的安全管理，需要编写配置类进行配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.eurekaserver.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line">        <span class="comment">//关闭csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//支持httpBasic</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编写启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.eurekaserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，启动主启动类，访问页面时输入输入配置文件的用户名密码即可登录Eureka的Web控制界面，如下图：</p><p><img src="/img/springcloud/ribbon/eureka_boot.png" alt=""></p><p><strong>创建两个模块接口：</strong></p><p>分别创建两个模块，ribbon-provider-8081和ribbon-provider-8082，并将两个模块注册进注册中心，两个模块的代码是一样的，所以这里只写一份就可以了：</p><p>首先，附上模块的结构，方便大家的创建：</p><p><img src="/img/springcloud/ribbon/ribbon_module.png" alt=""></p><p>先将项目的相关依赖导入：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line"> &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependencyManagement&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">       &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">       &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line"> &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>接着编写application.properties配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 服务端口</span><br><span class="line">server.port=<span class="number">8081</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=ribbon-provider-<span class="number">8081</span></span><br><span class="line"></span><br><span class="line"># Eureka注册中心地址</span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//xiaozeng:123456@localhost:8010/eureka/</span></span><br><span class="line"></span><br><span class="line"># 使用IP注册</span><br><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"># 定义实例ID格式</span><br><span class="line">eureka.instance.instance-id=$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line"></span><br><span class="line">eureka.instance.status-page-url=http:<span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><p><strong>【注意：两个模块的端口号记得及时做修改】</strong></p><p>编写主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ribbon8081Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Ribbon8081Application<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是写一个/user/hello的接口，方便客户端使用Ribbon进行调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.ribbon.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Ribbon,I am 8081"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，编写完成两个模块代码之后，启动即可。</p><p>会发现两个接口都注册进了注册中心：</p><p><img src="/img/springcloud/ribbon/register_success.png" alt=""></p><p><strong>编写Ribbon客户端调用两个模块中的user/hello接口：</strong></p><p>创建ribbon-demo模块，使用Ribbon客户端调用注册中心中的两个接口，通过观察即可发现调用接口的次数不一样。</p><p>首先导入依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.netflix.ribbon&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ribbon&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.netflix.ribbon&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ribbon-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.netflix.ribbon&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ribbon-loadbalancer&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.reactivex&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;rxjava&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;28.0-jre&lt;/version&gt;</span><br><span class="line">          &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>这里直接使用简单的main方法实现接口调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ILoadBalancer;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.LoadBalancerBuilder;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.Server;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.reactive.LoadBalancerCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.reactive.ServerOperation;</span><br><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ribbonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 服务列表</span></span><br><span class="line">        List&lt;Server&gt; serverList = Lists.newArrayList(<span class="keyword">new</span> Server(<span class="string">"localhost"</span>, <span class="number">8081</span>), <span class="keyword">new</span> Server(<span class="string">"localhost"</span>, <span class="number">8082</span>));</span><br><span class="line">        <span class="comment">// 构建负载实例</span></span><br><span class="line">        ILoadBalancer loadBalancer = LoadBalancerBuilder.newBuilder().buildFixedServerListLoadBalancer(serverList);</span><br><span class="line">        <span class="comment">// 调用 5 次来测试效果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            String result = LoadBalancerCommand.&lt;String&gt;builder().withLoadBalancer(loadBalancer).build()</span><br><span class="line">                    .submit(<span class="keyword">new</span> ServerOperation&lt;String&gt;() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                String addr = <span class="string">"http://"</span> + server.getHost() + <span class="string">":"</span> + server.getPort() + <span class="string">"/user/hello"</span>;</span><br><span class="line">                                System.out.println(<span class="string">" 调用地址："</span> + addr);</span><br><span class="line">                                URL url = <span class="keyword">new</span> URL(addr);</span><br><span class="line">                                HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">                                conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">                                conn.connect();</span><br><span class="line">                                InputStream in = conn.getInputStream();</span><br><span class="line">                                <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">                                in.read(data);</span><br><span class="line">                                <span class="keyword">return</span> Observable.just(<span class="keyword">new</span> String(data));</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).toBlocking().first();</span><br><span class="line">            System.out.println(<span class="string">" 调用结果："</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RibbonClient.ribbonClient();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子主要演示了Ribbon如何去做负载均衡，调用接口用的最底层的HttpURLConnection。当然也可以直接使用RibbonClient执行程序。控制台输出结果如下：</p><p><img src="/img/springcloud/ribbon/ribbonClient.png" alt=""></p><p>从输入结果中可以看到，负载均衡起作用了，8081调用了2次，8082调用了3次。</p><h1 id="2-Ribbon-结合RestTemplate实现负载均衡"><a href="#2-Ribbon-结合RestTemplate实现负载均衡" class="headerlink" title="2. Ribbon 结合RestTemplate实现负载均衡"></a>2. Ribbon 结合RestTemplate实现负载均衡</h1><p>在上面已经简单的使用Ribbon进行了负载均衡的一个调用，其实在Spring Cloud中使用Ribbon会更加简单，很多配置都集成好了。</p><h2 id="2-1-使用RestTemplate并整合Ribbon"><a href="#2-1-使用RestTemplate并整合Ribbon" class="headerlink" title="2.1 使用RestTemplate并整合Ribbon"></a>2.1 使用RestTemplate并整合Ribbon</h2><p>Spring提供了一种简单的模板类来进行API的调用，那就是RestTemplate。</p><h3 id="2-1-1-使用RestTemplate"><a href="#2-1-1-使用RestTemplate" class="headerlink" title="2.1.1 使用RestTemplate"></a>2.1.1 使用RestTemplate</h3><p>在之前介绍Eureka时，已经使用过RestTemplate了，本节会更加详细地跟大家讲解RestTemplate 的具体使用方法。</p><p>首先我们来看看GET请求的使用方式：创建一个新的项目spring-rest-template,导入相关依赖 :</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">  &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>写一个配置类，将RestTemplate配置到IOC容器中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.self.template.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class BeanConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate getRestTemplate()&#123;</span><br><span class="line"></span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做测试之前需要创建一个HouseInfo的实体类，用于数据的封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String City;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String region;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseInfo</span><span class="params">(Long id, String city, String region, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        City = city;</span><br><span class="line">        <span class="keyword">this</span>.region = region;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//setter、getter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着可以新建一个HouseController,并添加两个接口，一个通过@RequestParam 来传递参数，返回一个对象信息；另一个通过@PathVariable来传递参数，返回一个字符串。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.template.entity.HouseInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/house/data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HouseInfo <span class="title">getData</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HouseInfo(<span class="number">1L</span>, <span class="string">"上海"</span> ,<span class="string">"虹口"</span> ,<span class="string">"东体小区"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/house/data/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData2</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个HouseClientController用于测试，使用RestTemplate来调用我们刚定义的两个接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.template.entity.HouseInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"call/data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HouseInfo <span class="title">getData</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://localhost:8083/house/data?name="</span> + name,HouseInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"call/data/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData2</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://localhost:8083/house/data/&#123;name&#125;"</span>,String<span class="class">.<span class="keyword">class</span>,<span class="title">name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的是主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，启动项目后，通过<a href="http://localhost:8083/call/data?name=xiaozeng可以访问到第一个接口，返回的是一个HouseInfo的对象，结果如下图：" target="_blank" rel="noopener">http://localhost:8083/call/data?name=xiaozeng可以访问到第一个接口，返回的是一个HouseInfo的对象，结果如下图：</a></p><p><img src="/img/springcloud/ribbon/ribbon_RestGetData.png" alt=""></p><p> 可以通过<a href="http://localhost:8083/call/data/xiaozeng,可以访问第二个接口，返回一个字符串，结果如下：" target="_blank" rel="noopener">http://localhost:8083/call/data/xiaozeng,可以访问第二个接口，返回一个字符串，结果如下：</a></p><p><img src="/img/springcloud/ribbon/ribbon_RestGetData2.png" alt=""></p><p>获取数据结果可通过RestTemplate的getForObject方法来实现，此方法有三个重载的实现：</p><ul><li>url : 请求的API地址。有两种方式，其中一种是字符串，另一种是URI形式。</li><li>responseType : 返回值类型。</li><li>uriVariables : PathVariable参数，有两种方式，其中一种是可变参数，另一种是Map形式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(String url,Class&lt;T&gt; responseType,Object... uriVariabble)</span></span>;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(String url,Class&lt;T&gt; responseType,Map&lt;String,?&gt; uriVariable)</span></span>;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(String url,Class&lt;T&gt; responseType)</span></span>;</span><br></pre></td></tr></table></figure><p>除了使用GetForObject,我们还可以使用getForEntity来获取数据，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"call/dataEntity"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> HouseInfo <span class="title">getDataByGetForEntity</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    ResponseEntity&lt;HouseInfo&gt; entity = restTemplate.getForEntity(<span class="string">"http://localhost:8083/house/data?name="</span> + name, HouseInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCodeValue() == <span class="number">200</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"entity body = "</span> + entity.getBody());</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getForEntity中可以获取返回的状态码、请求头的信息，通过getBody获取响应的内容，其余的和getForObject是一样的，也有3个重载的实现。结果如下图：</p><p><img src="/img/springcloud/ribbon/getForEntity.png" alt=""></p><p>接下来看看如何使用POST方法调用接口。在HouseController中添加一个addHouseData的方法来接收数据，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/house/addHouseData"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Long <span class="title">addHouseData</span><span class="params">(@RequestBody HouseInfo houseInfo)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"data = "</span> + houseInfo.getName());</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1111L</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接着在HouseClientController中编写调用代码，用postForObject来调用接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/call/saveHouseData"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Long <span class="title">saveHouseData</span><span class="params">()</span></span>&#123;</span><br><span class="line">     HouseInfo houseInfo = <span class="keyword">new</span> HouseInfo();</span><br><span class="line">     houseInfo.setId(<span class="number">520L</span>);</span><br><span class="line">     houseInfo.setCity(<span class="string">"广西钦州市"</span>);</span><br><span class="line">     houseInfo.setRegion(<span class="string">"钦北区"</span>);</span><br><span class="line">     houseInfo.setName(<span class="string">"大直镇"</span>);</span><br><span class="line">     Long id = restTemplate.postForObject(<span class="string">"http://localhost:8083/house/addHouseData"</span>, houseInfo, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> id;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>启动项目通过访问http:localhost:8083/call/saveHouseData接口可以获取返回值和控制台输出：</p><p><img src="/img/springcloud/ribbon/post_1.png" alt=""></p><p><img src="/img/springcloud/ribbon/post_2.png" alt=""></p><p>postForObject同样有3个重载的实现。除了postForObject还可以使用postForEntity方法，用法都一样，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url,Object request,Class&lt;T&gt; responseType,Object... uriVariables)</span></span>;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url,Object request,Class&lt;T&gt; responseType,Map&lt;String,?&gt; uriVariables)</span></span>;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(URL url,Object request,Class&lt;T&gt; responseType)</span></span>;</span><br></pre></td></tr></table></figure><p>除了get和post对应的方法，RestTemplate还提供了put、delete等操作方法，还有一个比较实用的就是exchange方法。exchange可以执行get、post、put、delete这四种请求方式。大家感兴趣可以自行学习。</p><h3 id="2-2-2-整合Ribbon"><a href="#2-2-2-整合Ribbon" class="headerlink" title="2.2.2 整合Ribbon"></a>2.2.2 整合Ribbon</h3><p>在Spring Cloud项目中集成Ribbon只需要在pom.xml中加入下面依赖即可，其实也可以不用配置，因为Eureka中已经引入了Ribbon，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2-RestTemplate-负载均衡示例"><a href="#2-2-RestTemplate-负载均衡示例" class="headerlink" title="2.2 RestTemplate 负载均衡示例"></a>2.2 RestTemplate 负载均衡示例</h2><p>前面我们调用接口都是通过具体的接口地址来进行调用，RestTemplate可以结合Eureka来动态发现服务并进行负载均衡的调用。</p><p>修改RestTemplate的配置，增加能够让RestTemplate具备负载均衡能力的注解@LoadBalanced。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改接口调用的代码，将IP + PORT改成服务名称，也就是注册到Eureka中的名称，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/call/data"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> HouseInfo <span class="title">getData</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://ribbon-eureka-provider/house/data?name="</span> + name, HouseInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用接口的时候，框架内部会将服务名称替换成具体的的服务IP信息，然后进行调用。</p><h2 id="2-3-LoadBalanced注解原理"><a href="#2-3-LoadBalanced注解原理" class="headerlink" title="2.3 LoadBalanced注解原理"></a>2.3 LoadBalanced注解原理</h2><p>相信大家一定有一个疑问：为什么在RestTemplate上加一个@LoadBalanced之后，RestTemplate就能够跟Eureka结合了，不但可以使用服务名称进行接口调用，还可以负载均衡？？</p><p>其实是SpringCloud在底层为我们封装好的，可以简化代码，提高效率。</p><p>@LoadBalanced实现的主要逻辑就是给RestTemplate增加拦截器，在请求之前对请求地址进行替换，或者根据具体的负载均衡策略选择服务地址，然后再去调用，这就是@LoadBalanced的原理。</p><p>下面我们来实现一个简单的拦截器，看看在调用接口之前会不会进入这个拦截器。具体代码如下：</p><p>首先，创建拦截器MyLoadBalancedInterceptor : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalancedInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line">    <span class="keyword">private</span> LoadBalancerRequestFactory requestFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLoadBalancedInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLoadBalancedInterceptor</span><span class="params">(LoadBalancerClient loadBalancer, LoadBalancerRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadBalancer = loadBalancer;</span><br><span class="line">        <span class="keyword">this</span>.requestFactory = requestFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLoadBalancedInterceptor</span><span class="params">(LoadBalancerClient loadBalancer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(loadBalancer,<span class="keyword">new</span> LoadBalancerRequestFactory(loadBalancer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        URI uri = request.getURI();</span><br><span class="line">        String serviceName = uri.getHost();</span><br><span class="line">        System.out.println(<span class="string">"进入自定义的请求拦截器中 : "</span> + serviceName);</span><br><span class="line">        Assert.state(serviceName != <span class="keyword">null</span>,<span class="string">"Request URI does not contain a valid hostname:"</span> + uri);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.loadBalancer.execute(serviceName,requestFactory.createRequest(request,body,execution));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器设置好之后，我们定义一个注解@MyLoadBalanced,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD,ElementType.PARAMETER,ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLoadBalanced &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个配置类，给RestTemplate注入拦截器，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.template.interceptor.MyLoadBalancedInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalancerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyLoadBalanced</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;RestTemplate&gt; restTemplates = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyLoadBalancedInterceptor <span class="title">myLoadBalancedInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLoadBalancedInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SmartInitializingSingleton <span class="title">myLoadBalancedRestTemplateInitializer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmartInitializingSingleton() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSingletonsInstantiated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (RestTemplate restTemplate : MyLoadBalancerAutoConfiguration.<span class="keyword">this</span>.restTemplates)&#123;</span><br><span class="line">                    ArrayList&lt;ClientHttpRequestInterceptor&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(restTemplate.getInterceptors());</span><br><span class="line">                    list.add(<span class="keyword">new</span> MyLoadBalancedInterceptor());</span><br><span class="line">                    restTemplate.setInterceptors(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>维护一个@MyLoadBalanced的RestTemplate列表，在SmartInitializingSingleton 中对RestTemplate进行拦截器设置。</p><p>然后改造我们之前的RestTemplate配置，将@MyLoadBalanced添加进去，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@MyLoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后创建一个接口，用于测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/call/data/byLoadBalanced"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> HouseInfo <span class="title">getDataByMyLoadBalanced</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://ribbon-eureka-provider/house/data?name="</span> + name, HouseInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>重启服务，访问服务中的接口就可以看到控制台的输出了，这说明在接口调用的时候会进入拦截器，结果如下：</p><p><img src="/img/springcloud/ribbon/myLoadBalanced.png" alt=""></p><p>通过这个小案例可以很清楚的知道@LoadBalanced的工作原理。若还想更加深入的探究，可以自行去观看源码，这里不做过多的讲解。</p><h2 id="2-4-Ribbon-API的使用"><a href="#2-4-Ribbon-API的使用" class="headerlink" title="2.4 Ribbon API的使用"></a>2.4 Ribbon API的使用</h2><p>当你想通过Ribbon获取对应的服务信息时，可以使用LoadBalancer Client 来获取，比如想获取ribbon-eureka-provider服务的服务地址，可以通过LoadBalancerClient的choose方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.template.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonAPIController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/choose"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">chooseUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServiceInstance instance = loadBalancer.choose(<span class="string">"ribbon-eureka-provider"</span>);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问接口，可以看到返回的信息如下：</p><p><img src="/img/springcloud/ribbon/choose.png" alt=""></p><h2 id="2-5-Ribbon-饥饿加载"><a href="#2-5-Ribbon-饥饿加载" class="headerlink" title="2.5 Ribbon 饥饿加载"></a>2.5 Ribbon 饥饿加载</h2><p>在进行服务调用的时候，如果网络情况不好，第一次调用会超时。</p><p>Ribbon客户端是在第一次请求的时候初始化的，如果超时时间比较短，初始化Client的时间再加上请求接口的时间，就会导致第一次请求超时。</p><p>通过配置eager-load来提前初始化客户端就可以解决这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ribbon.eager-load.enabled=<span class="keyword">true</span></span><br><span class="line">ribbon.eager-load.clients=ribbon-eureka-provider</span><br></pre></td></tr></table></figure><ul><li>ribbon.eager-load.enabled : 开启Ribbon的饥饿加载模式。</li><li>ribbon.eager-load.clients : 指定需要饥饿加载的服务名，若有多个则用逗号隔开。</li></ul><h1 id="3-Ribbon-负载均衡策略介绍"><a href="#3-Ribbon-负载均衡策略介绍" class="headerlink" title="3. Ribbon 负载均衡策略介绍"></a>3. Ribbon 负载均衡策略介绍</h1><p>Ribbon作为一款客户端负载均衡框架，默认的负载聚恒策略是轮询，同时也提供了很多其他的策略，能够让用户根据自身的业务需求进行选择。</p><ul><li><p>BestAvailable</p><p>选择一个最小的并发请求的Server，逐个考察Server，如果Server被标记为错误，则跳过，然后在选择ActiveRequestCount 中最小的Server。</p></li><li><p>AvailabilityFilteringRule</p><p>过滤掉那些一直连接失败的且被标记为circuit tripped 的后端Server，并过滤掉那些高并发的后端Server 或者使用一个AvailabilityPredicate 来包含过滤Server的逻辑。其实就是检查Status里记录的各个Server的运行状态。</p></li><li><p>ZoneAvoidanceRule</p><p>使用ZoneAvoidancePredicate和AvailabilityPredicate 来判断是否选择某个Server，前一个判断一个Zone的运行性能是否可用，剔除不可用的Zone，AvailabilityPredicate用于过滤掉连接数过多的Server。</p></li><li><p>RandomRule</p><p>随机选择一个Server</p></li><li><p>RoundRobinRule</p><p>轮询选择，轮询index，选择index对应位置的Server</p></li><li><p>RetryRule</p><p>对选定的负载均衡策略机上重试机制，也就是说当选定了某个策略进行请求负载时在一个配置时间段内选择Server不成功，则一直尝试使用subRule的方式选择一个可用的Server。</p></li><li><p>WeightdResponseTimeRule</p><p>根据相应时间分配一个Weight(权重)，响应时间越长，Weight越小，被选中的可能性越低。</p></li></ul><h1 id="4-Ribbon配置详情"><a href="#4-Ribbon配置详情" class="headerlink" title="4. Ribbon配置详情"></a>4. Ribbon配置详情</h1><h2 id="4-1-常用配置"><a href="#4-1-常用配置" class="headerlink" title="4.1 常用配置"></a>4.1 常用配置</h2><h3 id="4-1-1-禁用Eureka"><a href="#4-1-1-禁用Eureka" class="headerlink" title="4.1.1 禁用Eureka"></a>4.1.1 禁用Eureka</h3><p>当我们在RestTemplate上添加@loadBalanced注解后，就可以用服务名称来调用接口了，当有多个服务的时候，还能做负载均衡。</p><p>这是因为Eureka中的服务信息已经被拉取到了客户端本地，如果我们不想和Eureka集成，可以通过以下的配置将其禁用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 禁用 Eureka</span><br><span class="line">ribbon.eureka.enabled=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>当我们禁用了Eureka之后，就不能使用服务名称去调用接口了，必须指定服务地址。</p><h3 id="4-1-2-配置接口地址列表"><a href="#4-1-2-配置接口地址列表" class="headerlink" title="4.1.2 配置接口地址列表"></a>4.1.2 配置接口地址列表</h3><p>如果禁用了Eureka，禁用之后就需要手动配置调用的服务地址了，配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 禁用 Eureka 后手动配置服务地址</span><br><span class="line">ribbon-config-demo.ribbon.listOfServers=localhost:<span class="number">8081</span>,localhost:<span class="number">8083</span></span><br></pre></td></tr></table></figure><p>这个配置是针对具体服务的，前缀就是服务名称，配置完之后就可以和之前一样使用服务名称来调用接口了。</p><h3 id="4-1-3-配置负载均衡策略"><a href="#4-1-3-配置负载均衡策略" class="headerlink" title="4.1.3 配置负载均衡策略"></a>4.1.3 配置负载均衡策略</h3><p>Ribbon 默认的策略是轮询，通过配置可以指定服务使用哪种策略来进行负载操作。</p><p>….</p><h3 id="4-1-4-超时时间"><a href="#4-1-4-超时时间" class="headerlink" title="4.1.4 超时时间"></a>4.1.4 超时时间</h3><p>Ribbon中有两种和时间相关的设置，分别是请求连接的超时时间和请求处理的超时时间，设置规则如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 请求连接的超时时间</span><br><span class="line">ribbon.ConnectTimeout=<span class="number">2000</span></span><br><span class="line"># 请求处理的超时时间</span><br><span class="line">ribbon.ReadTimeout=<span class="number">5000</span></span><br><span class="line"></span><br><span class="line">也可以为每个Ribbon客户端设置不同的超时时间, 通过服务名称进行指定：</span><br><span class="line">ribbon-config-demo.ribbon.ConnectTimeout=<span class="number">2000</span></span><br><span class="line">ribbon-config-demo.ribbon.ReadTimeout=<span class="number">5000</span></span><br></pre></td></tr></table></figure><h3 id="4-1-5-并发参数"><a href="#4-1-5-并发参数" class="headerlink" title="4.1.5 并发参数"></a>4.1.5 并发参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 最大连接数</span><br><span class="line">ribbon.MaxTotalConnections=<span class="number">500</span></span><br><span class="line"># 每个host最大连接数</span><br><span class="line">ribbon.MaxConnectionsPerHost=<span class="number">500</span></span><br></pre></td></tr></table></figure><h2 id="4-2-代码配置Ribbon"><a href="#4-2-代码配置Ribbon" class="headerlink" title="4.2 代码配置Ribbon"></a>4.2 代码配置Ribbon</h2><p>配置Ribbon最简单的方式就是通过配置文件实现。当然我们也可以通过代码的方式来配置。</p><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="-SpringCloud" scheme="https://xiaozeng26.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Eureka的介绍和使用</title>
    <link href="https://xiaozeng26.github.io/2021/03/09/Spring-Cloud-Eureka%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaozeng26.github.io/2021/03/09/Spring-Cloud-Eureka%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-09T12:56:32.000Z</published>
    <updated>2021-03-13T06:53:01.244Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring Cloud Eureka 是一个基于REST的服务，并且提供了基于Java的客户端组件，能够非常方便地将服务注册到Spring Cloud Eureka中进行统一管理。</p><p>服务治理是微服务架构中必不可少的一部分，阿里开源的Dubbo框架就是针对服务治理的。服务治理必须要有一个注册中心，除了用Eureka作为注册中心外，我们还可以使用Consul、Zookeeper等来作为服务的注册中心。</p><p>注册中心带来的好处就是，不需要知道有多少提供方，你只需要关注注册中心即可，就像顾客不必关心有多少火车在开，只需要去12306网站上看有没有票就可以了。</p><p>为什么Eureka比Zookeeper更合适作为注册中心呢？？主要是因为Eureka是基于AP原则构建的，而Zookeeper是基于CP原则构建的。</p><p>在分布式系统领域有个著名的CAP定理。即 C 为数据一致性；A 为服务可用性；P 为服务对网络分区故障的容错性。这三个特性在任何分布式系统中都不能同时满足，最多同时满足两个。</p><p>Zookeeper有一个Leader，而且在这个Leader无法使用的时候通过Paxos（ZAB）算法选举出一个新的Leader。这个Leader的任务就是保证写数据的时候只向这个Leader写入，Leader会同步信息到其他节点。通过这个操作就可以保证数据的一致性。</p><p>总而言之，想要保证AP就要用Eureka，想要保证CP就要用Zookeeper。</p><h1 id="1-使用-Eureka-编写注册中心服务"><a href="#1-使用-Eureka-编写注册中心服务" class="headerlink" title="1. 使用 Eureka 编写注册中心服务"></a>1. 使用 Eureka 编写注册中心服务</h1><p>首先使用Eureka搭建服务注册中心，创建一个Maven项目，取名为eureka-server，在pom.xml中配置Eureka的依赖信息，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencyManagement&gt;</span><br><span class="line">       &lt;dependencies&gt;</span><br><span class="line">           &lt;dependency&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">               &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">               &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">           &lt;/dependency&gt;</span><br><span class="line">       &lt;/dependencies&gt;</span><br><span class="line">   &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>接下来在src/main/resources下面创建一个application.properties属性文件，增加下面的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端口</span><br><span class="line">server.port=<span class="number">8010</span></span><br><span class="line"></span><br><span class="line"># 服务器名称</span><br><span class="line">spring.application.name=eureka-server</span><br><span class="line"></span><br><span class="line"># 是否将自己注册进注册中心</span><br><span class="line">eureka.client.register-with-eureka=<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># 是否检索服务,注册中心的职责是维护服务实例，所以不检索服务</span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><strong>【注意：eureka.client.register-with-eureka一定要设置为false，因为自身本来就是server端，没办法将自己注册进去，所设置为true会报错】。</strong></p><p>创建一个启动类EurekaServerApplication，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.eurekaserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里所说的启动类，跟一般的SpringBoot应用没什么区别，只是多了一个@EnableEurekaServer注解，表示开启Eureka Server。</p><p>最后，直接运行EurekaServerApplication就可以启动我们的注册中心服务了。可以直接通过<a href="http://localhost:8010访问，然后便会看到Eureka提供的Web控制台。">http://localhost:8010访问，然后便会看到Eureka提供的Web控制台。</a></p><h1 id="2-使用Eureka编写服务提供者"><a href="#2-使用Eureka编写服务提供者" class="headerlink" title="2. 使用Eureka编写服务提供者"></a>2. 使用Eureka编写服务提供者</h1><p>注册中心已经创建并且启动好了，接下来我们实现将一个服务提供者eureka-client-user-provider注册到Eureka中，并提供一个接口给其他服务调用。</p><h2 id="2-1-创建项目注册到Eureka中"><a href="#2-1-创建项目注册到Eureka中" class="headerlink" title="2.1 创建项目注册到Eureka中"></a>2.1 创建项目注册到Eureka中</h2><p>首先，创建一个Maven项目，然后在pom.xml中添加相关依赖，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>接下来在src/main/resources下面创建一个application.properties属性文件，添加下面的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 服务端口</span><br><span class="line">server.port=<span class="number">8011</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=eureka-client-user-provider</span><br><span class="line"></span><br><span class="line"># Eureka注册中心地址</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//localhost:8010/eureka/</span></span><br><span class="line"></span><br><span class="line"># 使用IP注册</span><br><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"># 定义实例ID格式</span><br><span class="line">eureka.instance.instance-id=$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure><p>创建一个启动类UserProviderApplication，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.serverprovider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserProviderApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以进一步检查服务是否注册成功。回到之前打开的Eureka的Web控制台，刷新页面，就可以看到新注册的服务信息了。结果如下：</p><p><img src="/img/springcloud/eureka/sucess.png" alt=""></p><p>不过需要注意的是，虽然是可以将服务提供者注册进注册中心，但是服务器控制台会一直报连接8761的错误，<strong>Eureka 注册中心一直报Connect to localhost:8761 time out 的问题</strong>，错误如图：</p><p><img src="/img/springcloud/eureka/bug.png" alt=""></p><p>解决这个问题很简单，只需要在注册中心的application.properties文件中加入defaultZone即可，因为默认是会连接8761端口，所以需要设置一个defaultZone进行覆盖默认的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8010/eureka/</span></span><br></pre></td></tr></table></figure><p>一般还会有一个警告，具体问题如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span><br></pre></td></tr></table></figure><p>这是Eureka的自我保护模式被启动了，当Eureka Server节点在短时间内丢失过多的实例的连接时，那么这个节点就会进入自我保护模式。一旦进入到该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据（即不会注销任何微服务）。</p><p>默认情况下，如果Eureka Server在一段时间内没有接受到某个微服务实例的心跳，便会注销该实例（默认是90秒），而一旦进入自我保护模式，那么即使关闭了指定实例，依然会发现该Eureka Server的注册实例中会存在被关闭的实例信息。</p><p>可以通过以下配置关闭Eureka的自我保护模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> #关闭自我保护机制，保证不可用服务被及时剔除</span><br><span class="line">eureka.server.enable-self-preservation: <span class="keyword">false</span></span><br><span class="line"> #清理无效节点的时间间隔,默认60000毫秒,即60秒 (此处时间间隔设置为2s)</span><br><span class="line">eureka.server.eviction-interval-timer-in-ms: <span class="number">2000</span></span><br></pre></td></tr></table></figure><p><strong>建议：</strong></p><p>对于开发环境的Eureka Server，建议关闭它的自我保护模式，因为你可能需要不断的开启和关闭实例，如果并未关闭自我保护模式，那么很容易就会触发自我保护模式，此时调试会相当麻烦。</p><h2 id="2-2-提供消费者调用的接口"><a href="#2-2-提供消费者调用的接口" class="headerlink" title="2.2 提供消费者调用的接口"></a>2.2 提供消费者调用的接口</h2><p>创建一个Controller，这是给其他服务（消费者）调用的接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.serverprovider.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务后，访问http:localhost:8011/user/hello,若能看到返回的Hello world 字符串，就证明接口提供成功。</p><h1 id="3-使用Eureka编写服务消费者"><a href="#3-使用Eureka编写服务消费者" class="headerlink" title="3. 使用Eureka编写服务消费者"></a>3. 使用Eureka编写服务消费者</h1><h2 id="3-1-直接调用服务提供者提供的接口"><a href="#3-1-直接调用服务提供者提供的接口" class="headerlink" title="3.1 直接调用服务提供者提供的接口"></a>3.1 直接调用服务提供者提供的接口</h2><p>创建服务消费者，消费上面岗编写的user/hello接口。首先同样需要先创建一个Maven项目eureka-client-article-consumer，然后添加依赖，依赖和服务提供者的一样，这里就不粘贴代码了。</p><p>application.properties代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 服务端口</span><br><span class="line">server.port=<span class="number">8012</span></span><br><span class="line"></span><br><span class="line"># 应用服务名称</span><br><span class="line">spring.application.name=eureka-client-article-consumer</span><br><span class="line"></span><br><span class="line"># Eureka注册中心地址</span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8010/eureka/</span></span><br><span class="line"></span><br><span class="line"># 使用IP注册</span><br><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"># 定义实例ID格式</span><br><span class="line">eureka.instance.instance-id=$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure><p><strong>【注意：服务消费者也需要加入注册中心，所以在application.properties中添加注册中心的地址】</strong></p><p>主启动类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.articleconsumer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ArticleConsumerApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以调用user/hello实现功能，但是如何才能调用到另一个模块中的接口呢？？</p><p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率。我们通过配置RestTemplate来调用接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.articleconsumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口，在接口中调用user/hello接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.articleconsumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/article/callHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://localhost:8011/user/hello"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，将注册中心，服务提供者以及服务消费者的模块分别启动之后，就可以通过访问/article/callHello接口来看看是否有结果返回，若返回了就证明调用成功。访问地址为：<a href="http://localhost:8012/article/callHello。" target="_blank" rel="noopener">http://localhost:8012/article/callHello。</a></p><p>结果如下截图：</p><p><img src="/img/springcloud/eureka/callHello.png" alt=""></p><h2 id="3-2-通过Eureka来消费接口"><a href="#3-2-通过Eureka来消费接口" class="headerlink" title="3.2 通过Eureka来消费接口"></a>3.2 通过Eureka来消费接口</h2><p>上面提到的方法是直接通过服务接口的地址来调用的，这样是可行，但是这样就完全没有用到Eureka带给我们的便利。既然用来注册中心，那么客户端调用的时候肯定是不需要关心有多少个服务提供接口，下面我们来改造一下之前的调用代码。</p><p>首先改造RestTemplate的配置，添加一个@LoadBalanced注解，这个注解会自动改造LoadBalancerClient接口的实现类并注册到Spring容器中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.articleconsumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@LoadBalanced注解：</p><p><strong>作用：在使用RestTemplate的使用，如果RestTemplate上面有这个注解，那么这个RestTemplate调用的远程地址，会走负载均衡器。</strong></p><p><strong>原理：使用这个注解以后，会在restTemplate里面通过restTemplate.setInterceptors放入LoadBalancedInterceptor，这个拦截器会在请求远程接口的时候动态判断请求的域是不是负载均衡服务的地址，如果是，那么就会代理使用这个负载均衡器来调用。</strong></p><p>接下来就是写调用接口的代码，我们不再直接写固定地址，而是写成服务的名称，这个名称就是我们注册到Eureka中的名称，即application.properties中的spring.application.name,相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"article/callHello2"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">callHello2</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://eureka-client-user-provider/user/hello"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>效果与之前的结果并没有什么区别。只是调用的接口不一样，如下：</p><p><img src="/img/springcloud/eureka/callHello2.png" alt=""></p><h1 id="4-Eureka注册中心开启密码认证"><a href="#4-Eureka注册中心开启密码认证" class="headerlink" title="4. Eureka注册中心开启密码认证"></a>4. Eureka注册中心开启密码认证</h1><p>因为Eureka自带了一个Web的管理界面，方便我们查询注册到上面的实例信息，但是也有一个问题：如果在实际使用中，注册中心地址有公网IP的话，必然能直接访问到，这样是不安全的。所以我们需要对Eureka进行改造，加上权限认证来保证安全性。</p><p>改造我们的eureka-server，通过Spring-Security来进行安全认证。</p><p>在pom.xml中添加Spring-Security的依赖包，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后在application.properties中加入认证的配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># spring-security的配置信息：</span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>添加Security的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.eurekaserver.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line">        <span class="comment">//关闭csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//支持httpBasic</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，重新启动注册中心，访问<a href="http://localhost:8010/此时浏览器会提示你输入用户名和密码，输入正确后才能继续访问Eureka提供的管理界面。然后将在application.properties中设置的用户名和密码填写就可以访问，效果截图如下：" target="_blank" rel="noopener">http://localhost:8010/此时浏览器会提示你输入用户名和密码，输入正确后才能继续访问Eureka提供的管理界面。然后将在application.properties中设置的用户名和密码填写就可以访问，效果截图如下：</a></p><p><img src="/img/springcloud/eureka/security.png" alt=""></p><p><strong>注意：在Eureka开启认证后，客户端注册的配置也要加上认证的用户名和密码信息，否则客户端是无法将服务注册进注册中心：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Eureka注册中心地址</span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//xiaozeng:123456@localhost:8010/eureka/</span></span><br></pre></td></tr></table></figure><h1 id="5-Eureka集群搭建"><a href="#5-Eureka集群搭建" class="headerlink" title="5. Eureka集群搭建"></a>5. Eureka集群搭建</h1><p>前面我们搭建的注册中心只适合本地开发使用，在生产环境中必须搭建一个集群来保证高可用。Eureka的集群搭建方法很简单：每一台Eureka只需要在配置中指定另外多个Eureka的地址就可以实现一个集群的搭建了。</p><p>下面我们以2个节点为例来说明搭建方式。假设我们有master和slave1两台机器，需要做的就是：</p><ul><li>将master注册到slave1中。</li><li>将slave1注册到master中。</li></ul><p>如果是3台机器，以此类推：</p><ul><li>将master注册到slave1和slave2中。</li><li>将slave1注册到master和slave2中。</li><li>将slave2注册到master和slave1中。</li></ul><p><strong>搭建集群步骤：</strong></p><p>创建一个新的项目eureka-server-cluster,在该项目下分别创建eureka-server-master和eureka-server-slave1。代表的是master和slave1。</p><p>结构如下图：</p><p><img src="/img/springcloud/eureka/cluster.png" alt=""></p><p>在master和slave1项目的pom.xml中都导入下面的这些依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Finchley.SR2&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>接下来写master的application.properties:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端口</span><br><span class="line">server.port=<span class="number">8100</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=eureka-server-master</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-server-master</span><br><span class="line"></span><br><span class="line"># 此应用为注册中心，false：不向注册中心注册自己。</span><br><span class="line">eureka.client.register-with-eureka = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># 注册中心职责是维护服务实例，false：不检索服务。</span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># 指向从节点的地址</span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//xiaozeng:123456@eureka-server-slave1:8110/eureka/</span></span><br><span class="line"></span><br><span class="line"># spring-security的配置信息：</span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>slave的application.properties：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端口</span><br><span class="line">server.port=<span class="number">8110</span></span><br><span class="line"></span><br><span class="line"># 服务应用名称</span><br><span class="line">spring.application.name=eureka-server-slave1</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eureka-server-slave1</span><br><span class="line"></span><br><span class="line"># 此应用为注册中心，false：不向注册中心注册自己。</span><br><span class="line">eureka.client.register-with-eureka = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># 注册中心职责是维护服务实例，false：不检索服务。</span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># 指向主节点的地址</span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//xiaozeng:123456@eureka-server-master:8100/eureka/</span></span><br><span class="line"></span><br><span class="line"># spring-security的配置信息：</span><br><span class="line">spring.security.user.name=xiaozeng</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>然后就是master和slave的主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.master;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MasterApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.slave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlaveApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SlaveApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，可以在master和slave中都配置上spring-security的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.slave.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line">        <span class="comment">//关闭csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//支持httpBasic</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步之后就可以启动master和slave模块，分别访问<a href="http://localhost:8100、http://localhost:8110可以出现以下结果代表配置集群搭建成功。结果如下图：">http://localhost:8100、http://localhost:8110可以出现以下结果代表配置集群搭建成功。结果如下图：</a></p><p><img src="/img/springcloud/eureka/master_slave1.png" alt=""></p><p>上图是主节点中注册了从节点，下图中是从节点中注册了主节点：</p><p><img src="/img/springcloud/eureka/slave1_master.png" alt=""></p><p>这样就将master注册到了slave1中，将slave1注册到master中，无论谁出现问题，应用都能继续使用存活的注册中心。</p><h1 id="6-Eureka的InstanceID配置。"><a href="#6-Eureka的InstanceID配置。" class="headerlink" title="6. Eureka的InstanceID配置。"></a>6. Eureka的InstanceID配置。</h1><h2 id="1-自定义Eureka的InstanceID"><a href="#1-自定义Eureka的InstanceID" class="headerlink" title="1. 自定义Eureka的InstanceID"></a>1. 自定义Eureka的InstanceID</h2><p>客户端在注册时，服务的Instance ID的默认值的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span><br></pre></td></tr></table></figure><p>翻译过来就是：”主机名：服务名称：服务端口”。当我们在Eureka的Web控制台查看服务注册信息的时候，就是这样的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UP (<span class="number">1</span>) - eureka-client-user-provider:<span class="number">8011</span></span><br></pre></td></tr></table></figure><p>很多时候，我们想把IP显示在上述的格式中，此时，只要把主机名替换成IP就可以了，或者调整顺序也可以。可以改成下面的样子，用 “服务名称：服务所在IP：服务端口”的格式来定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.instance-id=$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure><p>定义之后我们看到的就是eureka-client-user-provider：192168.41.5:8011，这样做的话，一眼就能知道是哪个服务，在哪台机器上，端口是多少。</p><p>我们还可以点击服务的instance ID进行跳转，这时候显示的名称虽然变成了IP，但是跳转的链接却还是主机名。</p><p>所以还需要加一个配置才能让跳转的链接变成我们想要的样子，使用IP进行注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="2-自定义实例跳转链接"><a href="#2-自定义实例跳转链接" class="headerlink" title="2. 自定义实例跳转链接"></a>2. 自定义实例跳转链接</h2><p>通过刚刚的配置实现了用IP进行注册，当点击InstanceID进行跳转的时候，就可以用IP跳转了，跳转的地址默认是IP + Port/info。我们可以自定义这个跳转的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.status-page-url=http:<span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><p>重启服务服务提供者后，当点击InstanceID的时候就可以跳往百度页面：</p><p><img src="/img/springcloud/eureka/pageUrl.png" alt=""></p><p><strong>【注意：需要理解的是，将IP注册的配置和实例跳转链接的配置是需要配置在服务提供者，而非配置在注册中心。需要理清楚哪些配置配置在哪很重要】</strong></p><h1 id="7-Eureka开发时快速移除失效服务"><a href="#7-Eureka开发时快速移除失效服务" class="headerlink" title="7. Eureka开发时快速移除失效服务"></a>7. Eureka开发时快速移除失效服务</h1><p>在实际开发过程中，我们可能会不停地重启服务，由于Eureka有自己的保护机制，故节点下线后，服务信息还会一直存在于Eureka中。我们可以通过增加一些配置让移除的速度更快一些，当然只在开发环境下使用，生产环境不推荐使用。</p><p>首先在我们的 eureka-server 中增加两个配置，分别是关闭自我保护和清理间隔：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka.server.enable-self-preservation=<span class="keyword">false</span></span><br><span class="line"># 清理间隔，默认 60000 毫秒</span><br><span class="line">eureka.server.eviction-interval-timer-in-ms=<span class="number">5000</span></span><br></pre></td></tr></table></figure><p>然后在具体的客户端服务中配置下面的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.healthcheck.enabled=<span class="keyword">true</span></span><br><span class="line"># 默认 30 秒</span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds=<span class="number">5</span></span><br><span class="line"># 默认 90 秒</span><br><span class="line">eureka.instance.lease-expiration-duration-in-seconds=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>eureka.client.healthcheck.enabled用于开启健康检查，需要在pom.xml中引入actuator的依赖，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p>eureka.instance.lease-renewal-interval-in-seconds 表示Eureka Client 发送心跳给server端的频率。</p></li><li><p>eureka.instance.lease-expiration-duration-in-seconds 表示Eureka Server 至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没有收到下一次心跳，则移除该instance。</p></li></ul><p>更多的Instance配置信息可参考源码中的配置类：</p><p>org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean。</p><p>更多的Server配置信息可参考源码中的配置类：</p><p>org.springframework.cloud.netflix.server.EurekaServerConfigBean。</p><h1 id="8-Eureka的REST-API及API扩展"><a href="#8-Eureka的REST-API及API扩展" class="headerlink" title="8. Eureka的REST API及API扩展"></a>8. Eureka的REST API及API扩展</h1><p>这里讲解一些经常用到的配置信息以及Eureka的REST API，通过API 可以做一些扩展。</p><h2 id="8-1-Eureka-REST-API"><a href="#8-1-Eureka-REST-API" class="headerlink" title="8.1 Eureka REST API"></a>8.1 Eureka REST API</h2><p>Eureka作为注册中心，其本质是存储了每个客户端的注册信息，Ribbon在转发的时候会获取注册中心的服务列表，然后根据对应的路由规则来选择一个服务给Feign来进行调用。如果我们不是Spring Cloud技术选型，也想用Eureka，可以吗？？完全可以。</p><p>如果不是Spring Cloud技术栈，笔者推荐用Zookeeper，这样会方便些，当然用Eureka也是可以的，这样的话就会涉及如何注册信息、如何获取注册信息等操作，其实Eureka也考虑到了这点，提供了很多REST接口来给我们调用。</p><p>其实利用Eureka提供的API我们可以获取某个服务的实例信息，获取某个服务的注册信息，可以直接GET请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8010/eureka/apps/eureka-client-article-consumer</span></span><br></pre></td></tr></table></figure><p>其中，localhost:8010是服务注册中心地址，eureka-client-article-consumer是应用名称（注册到注册中心的服务），即spring.application.name。</p><p>在浏览器中，数据的显示格式默认是XML格式的，如下图：</p><p><img src="/img/springcloud/eureka/registerInfo.png" alt=""></p><p>如果想反悔JSON数据的格式，可以用一些借口测试工具请求，比如Postman，在请求头添加下面两行代码即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:application/json </span><br><span class="line">Accept: application/json</span><br></pre></td></tr></table></figure><p>如果Eureka开启了认证，记得添加认证信息，用户名和密码必须是Base64编码过的Authorization: Basic 用户名:密码。Postman直接支持Basic认证，将选项从Headers切换到Authorization,选择认证方式为Basic Auth 就可以填写用户信息。</p><p>填写完成后直接发起请求就可以获取JSON数据的服务注册信息:</p><p><img src="/img/springcloud/eureka/registerInfo_JSON.png" alt=""></p><h2 id="8-2-元数据的使用"><a href="#8-2-元数据的使用" class="headerlink" title="8.2 元数据的使用"></a>8.2 元数据的使用</h2><p>Eureka的元数据有两种类型，分别是框架定好了的标准元数据和用户自定义数据。标准元数据指的是主机名、IP地址、端口号、状态页和健康检查等信息，这些信息都会被发布在服务列表中，用于服务之间的调用。<strong>自定义元数据可以使用eureka.instance.metadataMap进行配置。</strong></p><p>自定义元数据说得通俗点就是自定义配置，我们可以为每个Eureka Client定义一些属于自己的配置，这个配置不会影响Eureka的功能。</p><p>自定义元数据可以用来做一些扩展信息，比如灰度发布之类的功能，可以用元数据来存储灰度发布的状态数据，Ribbon转发的时候就可以根据服务的元数据来做一些处理。当不需要灰度发布的时候可以调用Eureka提供的REST API将元数据清除掉。</p><p>下面我们可以自定义一个简单的元数据，在配置文件中配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.metadataMap.name=xiaozeng</span><br></pre></td></tr></table></figure><p>上述代码中定义了一个key为name的配置，value是xiaozeng。重启服务，然后通过Eureka提供的REST API 来查看刚刚配置的元数据是否已经存在于Eureka中。</p><p><img src="/img/springcloud/eureka/metadata.png" alt=""></p><p><strong>【注意: 元数据的配置是添加在客户端的配置文件中，而不是注册中心中】</strong></p><h2 id="8-3-EurekaClient的使用"><a href="#8-3-EurekaClient的使用" class="headerlink" title="8.3 EurekaClient的使用"></a>8.3 EurekaClient的使用</h2><p>当我们的项目集成了Eureka之后，可以通过EurekaClient来获取一些我们想要的数据，比如上面说的元数据，我们就可以通过EurekaClient来获取，不用再去调用Eureka提供的REST API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.articleconsumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> com.netflix.discovery.EurekaClient eurekaClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/article/infos"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getMetaData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eurekaClient.getInstancesByVipAddress(<span class="string">"eureka-client-article-consumer"</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/source/img/springcloud/eureka/eurekaClient.png" alt=""></p><p>也可以用过Postman来调用接口查看返回的数据，这时我们会发现，通过EurekaClient 获取到的数据跟我们自己去调API获取的数据是一样的。从使用的角度来说，前者更方便。</p><p>除了使用EurekaClient，还可以使用DiscoveryClient，这个不是Feign自带的，是Spring Cloud重新封装的，类的路径为：org.springframework.cloud.client.discovery.DiscoveryClient。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/article/infos"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getMetaData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> discoveryClient.getInstances(<span class="string">"eureka-client-article-consumer"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="SpringCloud" scheme="https://xiaozeng26.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Starter的介绍和使用</title>
    <link href="https://xiaozeng26.github.io/2021/03/07/Spring-Boot-Starter%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaozeng26.github.io/2021/03/07/Spring-Boot-Starter%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-07T09:35:53.000Z</published>
    <updated>2021-03-09T11:53:42.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们都知道Spring Boot开发相当的便利，对于开发人员来说是一个福音，其实它就是通过引入各种的Spring Boot Starter包可以快速搭建出一个项目的脚手架。</p><p>目前提供的Spring Boot Starter包有很多，比如：</p><ul><li>spring-boot-starter-web : 快速构建基于Spring MVC的Web项目，使用Tomcat做默认嵌入式容器。</li><li>spring-boot-starter-data-redis : 操作Redis。</li><li>spring-boot-starter-data-mongodb : 操作mongodb。</li><li>spring-boot-starter-data-jpa : 操作MySQL</li><li>spring-boot-starter-activemq : 操作Activemq</li><li>……</li></ul><p>自动配置虽然非常方便，但是自动配置麻烦的是出现错误时，排查问题的难度上升了。自动配置的逻辑都在Spring Boot Starter中，要想快速定位问题，就必须得了解Spring Boot Starter的内部原理。接下来我们自己手动实现一个Spring Boot Starter。</p><h1 id="1-Spring-Boot-Starter项目创建"><a href="#1-Spring-Boot-Starter项目创建" class="headerlink" title="1. Spring Boot Starter项目创建"></a>1. Spring Boot Starter项目创建</h1><p>创建一个项目springboot-starter-demo，pom.xml配置代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>创建一个配置类，用于在属性文件中配置值，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springbootstarterdemo.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个Client，里面定一个方法，用于获取配置中的值，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springbootstarterdemo.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springbootstarterdemo.properties.UserProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserProperties userProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClient</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClient</span><span class="params">(UserProperties p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userProperties = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userProperties.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-自动创建客户端"><a href="#2-自动创建客户端" class="headerlink" title="2. 自动创建客户端"></a>2. 自动创建客户端</h1><p>以上就是最基本的一个Starter包定义，但目前肯定是不能使用UserClient，因为我们没有自动构建UserClient的实例。接下来开始构建UserClient,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springbootstarterdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springbootstarterdemo.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> com.self.springbootstarterdemo.properties.UserProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(UserProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.user"</span>,value = <span class="string">"enabled"</span>,havingValue = <span class="string">"true"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserClient <span class="title">userClient</span><span class="params">(UserProperties userProperties)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserClient(userProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources下创建一个META-INF文件夹，然后在META-INF文件夹中创建spring.factories文件，文件中指定自动配置的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.self.springbootstarterdemo.config.UserAutoConfiguration</span><br></pre></td></tr></table></figure><p><strong>【注意：注意spring.factories文件内容的格式】</strong></p><p>至此，Spring Boot启动时会去读取spring.factories文件，然后根据配置激活对应的配置类，这样，一个简单的Starter包就实现了。</p><h1 id="3-使用Starter"><a href="#3-使用Starter" class="headerlink" title="3. 使用Starter"></a>3. 使用Starter</h1><p>可以在其他项目中引入这个Starter包进行测试一下，代码如下：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.self&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springboot-starter-demo&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>引入之后就直接可以使用UserClient，UserClient在项目启动的时候已经自动初始化好，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springbootstarterdemo.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/name"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userClient.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在属性文件中配置name的值和开启UserClient : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.user.name=xiaozeng</span><br><span class="line">spring.user.enabled=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>访问/user/home 就可以返回我们配置的xiaozeng。</p><h1 id="4-使用注解开启Starter自动构建"><a href="#4-使用注解开启Starter自动构建" class="headerlink" title="4. 使用注解开启Starter自动构建"></a>4. 使用注解开启Starter自动构建</h1><p>很多时候我们不想在引入Starter包时就执行初始化的逻辑，而是想要由用户来指定是否要开启Starter包的自动配置功能，比如常用的@EnableAsync这个注解就是用于开启调用方法执行异步执行的功能。</p><p>同样地，我们也可以通过注解的方式来开启是否自动配置，如果用注解的方式，那么spring.factories就不需要编写了，下面就来看一下怎么定义启用自动配置的注解，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springbootstarterdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;UserAutoConfigure<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableUserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的核心就是@Import({UserAutoConfigure.class})，通过导入的方式实现把UserAutoConfigure实例加入SpringIOC容器中，这样就能开启自动配置了。</p><p>使用方式就是在启动类上加上该注解，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springboot_item.config.StartCommand;</span><br><span class="line"><span class="keyword">import</span> com.self.springbootstarterdemo.config.EnableUserClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableUserClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootItemApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> StartCommand(args);</span><br><span class="line">        SpringApplication.run(SpringbootItemApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-使用配置开启Starter自动构建"><a href="#5-使用配置开启Starter自动构建" class="headerlink" title="5. 使用配置开启Starter自动构建"></a>5. 使用配置开启Starter自动构建</h1><p>在某些场景下，UserAutoConfigure中会配置多个对象，对于这些对象，如果不想全部配置，或是想让用户指定需要开启配置时候再去构建对象，这时候我们可以通过@ConditionalOnProperty 来指定是否开启配置的功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.user"</span>,value = <span class="string">"enabled"</span>,havingValue = <span class="string">"true"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserClient <span class="title">userClient</span><span class="params">(UserPorperties userPorperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserClient(userPorperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的配置，只有当启动类加了@EnableUserClient并且配置文件中spring.user.enabled = true 的时候才会自动配置UserClient。</p><h1 id="6-配置Starter内容提示"><a href="#6-配置Starter内容提示" class="headerlink" title="6. 配置Starter内容提示"></a>6. 配置Starter内容提示</h1><p>在自定义Starter包的过程中，还有一点比较重要，就是对配置的内容项进行提示。</p><p>定义提示内容需要在META-INF 中创建一个spring-configuration-metadata.json文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"properties"</span>: [ &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"spring.user.name"</span>,</span><br><span class="line">        <span class="string">"defaultValue"</span>: <span class="string">"cxytinadi"</span></span><br><span class="line">    &#125;,  </span><br><span class="line">    &#123; </span><br><span class="line">             <span class="string">"name"</span>: <span class="string">"spring.user.enabled"</span>,</span><br><span class="line">             <span class="string">"type"</span>: <span class="string">"java.lang.Boolean"</span>,  <span class="string">"defaultValue"</span>: <span class="keyword">false</span> </span><br><span class="line">    &#125; ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name : 配置名</li><li>type ：配置的数据类型</li><li>defaultValue ：默认值</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="https://xiaozeng26.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot的基本使用</title>
    <link href="https://xiaozeng26.github.io/2021/03/06/SpringBoot%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaozeng26.github.io/2021/03/06/SpringBoot%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-07T09:13:33.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-SpringBoot的简介"><a href="#1-SpringBoot的简介" class="headerlink" title="1. SpringBoot的简介"></a>1. SpringBoot的简介</h1><p>Spring Boot其设计目的是简化Spring应用的初始搭建以及开发过程，省去了创建Web项目的一系列配置文件的编写。</p><p>Spring Boot是通过Starter的方式轻松集成第三方的框架，去掉XML的配置，全部使用注解代替。</p><p>Spring Boot开发的优点：</p><ul><li>基于Spring开发Web应用更加容易。</li><li>采用基于注解方式的配置，避免了编写大量重复的XML配置</li><li>可以轻松集成Spring家族的其他框架，比如Spring JDBC、Spring Data 等。</li><li>提供嵌入式服务器，令开发和部署都变得非常方便。</li></ul><h1 id="2-搭建SpringBoot项目"><a href="#2-搭建SpringBoot项目" class="headerlink" title="2. 搭建SpringBoot项目"></a>2. 搭建SpringBoot项目</h1><p>先使用IDEA开发工具搭建一个有webapp骨架的Maven工程，相关信息如下：</p><p><img src="/img/springcloud/springboot_item/create.png" alt=""></p><p>完成上述操作之后，在pom.xml中添加Springboot依赖，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>编写启动类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootItemApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        SpringApplication.run(SpringbootItemApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类使用了@SpringBootApplication注解，这个注解表示该类是一个 Spring Boot应用。</p><p>编写controller ,创建第一个REST接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接运行main类即可启动，启动成功后控制台输出信息，默认端口为8080，如图所示：</p><p><img src="/img/springcloud/springboot_item/boot.png" alt=""></p><p>可以看到，我们只在pom.xml中引入了一个Web的starter，然后创建一个普通的Java类，一个Main方法就可以启动一个Web项目。</p><p>之所以可以通过一个Main启动一个Web服务，是因为Spring Boot中内嵌了Tomcat，然后通过内嵌的Tomcat来提供服务，当然，我们也可以使用别的容器来替换Tomcat，比如Undertow或者Jetty。</p><p>根据上边写的REST接口，访问地址使用/demo/hello：</p><p><img src="/img/springcloud/springboot_item/access.png" alt=""></p><p>其中@RestController是Controller和@ResponseBody的组合注解，可以直接返回JSON数据。</p><p>@GetMapping其实就是@RequestMapping(method = RequestMethod.GET),用过地址就可以看到输出的结果”hello world”。</p><h2 id="2-1-读取配置文件"><a href="#2-1-读取配置文件" class="headerlink" title="2.1 读取配置文件"></a>2.1 读取配置文件</h2><p>在以前的项目中我们主要在XML文件中践行框架配置，业务的相关配置会放在属性文件中，然后通过一个属性读取的工具类来读取配置信息。</p><p>在Spring Boot 中我们不再需要使用这种方式读取数据了。Spring Boot中的配置通常放在application.properties或者application.yml中，读取配置信息非常方便，总共分为3中方式。</p><p>首先，在application.properties中定义端口号：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><p><strong>1) Environment</strong></p><p>可以通过Environment的getProperty方法来获取想要的配置信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Environment对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//读取配置</span></span><br><span class="line">        String port = env.getProperty(<span class="string">"server.port"</span>);</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2) @Value</strong></p><p>可以注入具体的配置信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3) 自定义配置类</strong></p><p>首先在application.properties中定义name属性：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">myself.name</span>=<span class="string">xiaozeng</span></span><br></pre></td></tr></table></figure><p>prefix定义配置的前缀，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"myself"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取配置的方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springboot_item.config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-profiles多环境配置"><a href="#2-2-profiles多环境配置" class="headerlink" title="2.2 profiles多环境配置"></a>2.2 profiles多环境配置</h2><p>在平时的开发中，项目会被部署到开发环境、测试环境、生产环境，但是每个环境的数据库地址等信息都是不一样的。通过profile来激活不同环境下的配置文件就能解决配置信息不一样的问题。在Spring Boot 中可以通过spring.profiles.active=dev来激活不同环境的配置。</p><p>可以定义多个配置文件，每个配置文件对应一个环境，格式为application-环境.properties,如图所示：</p><table><thead><tr><th align="center">文件</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">application.properties</td><td align="center">通用配置，不区分环境</td></tr><tr><td align="center">application-dev.properties</td><td align="center">开发环境</td></tr><tr><td align="center">application-test.properties</td><td align="center">测试环境</td></tr><tr><td align="center">application-prod.properties</td><td align="center">生产环境</td></tr></tbody></table><h2 id="2-3-actuator监控"><a href="#2-3-actuator监控" class="headerlink" title="2.3 actuator监控"></a>2.3 actuator监控</h2><p>Spring Boot提供了一个用于监控和管理自身应用信息的模块，它就是spring-boot-starter-actuator。该模板使用起来非常简单，只需要添加依赖即可，代码如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>actuator模块提供许多端点，通过访问这些端点我们可以得到很多监控信息。</p><p>比如，访问/actuator/health可以得到下面的信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>:<span class="string">"UP"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UP表示当前应用处于健康状态，如果是DOWN就表示当前应用不健康。增加下面配置可以让一些健康信息的详情也显示出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoint.health.show-details=ALWAYS</span><br></pre></td></tr></table></figure><p>当再次访问/actuator/health,就可以得到健康状态的详细信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>:<span class="string">"UP"</span>,</span><br><span class="line">    <span class="attr">"components"</span>:&#123;</span><br><span class="line">        <span class="attr">"diskSpace"</span>:&#123;</span><br><span class="line">            <span class="attr">"status"</span>:<span class="string">"UP"</span>,</span><br><span class="line">            <span class="attr">"details"</span>:&#123;</span><br><span class="line">         <span class="attr">"total"</span>:<span class="number">524287995904</span>,</span><br><span class="line">                <span class="attr">"free"</span>:<span class="number">461191016448</span>,</span><br><span class="line">                <span class="attr">"threshold"</span>:<span class="number">10485760</span>,</span><br><span class="line">                <span class="attr">"exists"</span>:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"ping"</span>:&#123;</span><br><span class="line">            <span class="attr">"status"</span>:<span class="string">"UP"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了暴露/actuator/health端点信息，actuator还有很多的端点，例如下列：</p><table><thead><tr><th>Http方法</th><th>路径</th><th>描述</th><th>Http默认暴露</th></tr></thead><tbody><tr><td>GET</td><td>/actuator/conflgprops</td><td>查看配置属性，包含默认配置</td><td>false</td></tr><tr><td>GET</td><td>/actuator/beans</td><td>查看bean及其关系列表</td><td>false</td></tr><tr><td>GET</td><td>/actuator/heapdump</td><td>打印线程栈</td><td>false</td></tr><tr><td>GET</td><td>/actuator/env</td><td>查看所有环境变量</td><td>false</td></tr><tr><td>GET</td><td>/actuator/env/{name}</td><td>查看具体变量值</td><td>false</td></tr><tr><td>GET</td><td>/actuator/health</td><td>查看应用健康指标</td><td>false</td></tr><tr><td>GET</td><td>/actuator/info</td><td>查看应用信息</td><td>false</td></tr><tr><td>GET</td><td>/actuator/mappings</td><td>查看所有URL映射</td><td>false</td></tr><tr><td>GET</td><td>/actuator/metrics</td><td>查看应用基本指标</td><td>false</td></tr><tr><td>GET</td><td>/actuator/metrics/{name}</td><td>查看具体指标</td><td>false</td></tr><tr><td>GET</td><td>/actuator/shutdown</td><td>关闭应用</td><td>false</td></tr><tr><td>GET</td><td>/actuator/httptrace</td><td>查看基本追踪信息</td><td>false</td></tr><tr><td>GET</td><td>/actuator/loggers</td><td>显示应用程序中loggers配置</td><td>false</td></tr><tr><td>GET</td><td>/actuator/scheduledtasks</td><td>显示定时任务</td><td>false</td></tr></tbody></table><p>不过大部分端点默认都不会暴露出来，我们可以手动配置需要暴露的端点。如果需要暴露多个端点，可以用逗号分隔，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=configprops,beans</span><br></pre></td></tr></table></figure><p>如果想全部端点都暴露的话，直接配置成下面的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br></pre></td></tr></table></figure><p>关于这些监控信息在这就不多赘述，大家可以自行了解。</p><h3 id="2-3-1-自定义actuator端点"><a href="#2-3-1-自定义actuator端点" class="headerlink" title="2.3.1 自定义actuator端点"></a>2.3.1 自定义actuator端点</h3><p>在很多情况下，我们需要自定义一些规则来判断应用的状态是否健康，可以采用自定义端点的方式满足多样性的需求。如果我们只是需要对应用的健康状态添加一些其他维度的数据，可以通过继承AbstractHealthIndicator来实现自己的业务逻辑。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.AbstractHealthIndicator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.Health;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyselfHealthIndicator</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        builder.up().withDetail(<span class="string">"status"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//builder.down().withDetail("status",false);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过up方法指定应用的状态为健康，down方法指定应用的状态为不健康。withDetail方法用于添加一些详细信息。访问/actuator/health，可以得到我们自定义的健康状态详细信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"status"</span>:<span class="string">"UP"</span>,</span><br><span class="line">    <span class="string">"components"</span>:&#123;</span><br><span class="line">        <span class="string">"diskSpace"</span>:&#123;</span><br><span class="line">            <span class="string">"status"</span>:<span class="string">"UP"</span>,</span><br><span class="line">            <span class="string">"details"</span>:&#123;</span><br><span class="line">                <span class="string">"total"</span>:<span class="number">524287995904</span>,</span><br><span class="line">                       <span class="string">"free"</span>:<span class="number">461190684672</span>,</span><br><span class="line">                <span class="string">"threshold"</span>:<span class="number">10485760</span>,</span><br><span class="line">                <span class="string">"exists"</span>:<span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"myself"</span>:&#123;</span><br><span class="line">            <span class="string">"status"</span>:<span class="string">"UP"</span>,</span><br><span class="line">            <span class="string">"details"</span>:&#123;</span><br><span class="line">                <span class="string">"status"</span>:<span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ping"</span>:&#123;</span><br><span class="line">            <span class="string">"status"</span>:<span class="string">"UP"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们是在框架自带的health端点中进行扩展，还有一种需求是完全开发一个全新的端点，比如查看当前登录的用户信息的端点，自定义全新的端点很简单，通过@Endpoint注解就可以实现。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.Endpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.ReadOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; health()&#123;</span><br><span class="line">        ArrayList&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"userId"</span>,<span class="number">1001</span>);</span><br><span class="line">        map.put(<span class="string">"userName"</span>,<span class="string">"xiaozeng"</span>);</span><br><span class="line">        list.add(map);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过访问/actuator/user可以看到返回的用户信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"userName"</span>:<span class="string">"xiaozeng"</span>,</span><br><span class="line">        <span class="string">"userId"</span>:<span class="number">1001</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-4-统一异常处理"><a href="#2-4-统一异常处理" class="headerlink" title="2.4 统一异常处理"></a>2.4 统一异常处理</h2><p>对于接口的定义，我们通常会有一个固定格式，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"101"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"jack"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"102"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"jason"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果调用方在请求我们的API时把接口地址写错了，就会得到一个404错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"timestamp"</span>: <span class="number">1492063521109</span>,</span><br><span class="line">    <span class="string">"status"</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="string">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/rest11/auth"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端服务器会告诉我们哪个地址没找到，其实也挺友好的。但是因为我们上面自定义的数据格式跟下面的不一致，所以当用户拿到这个返回的时候是无法识别的，其中最明显的是status字段。</p><p>我们自定义的是boolean类型，用来表示请求是否成功，这里返回的就是Http的状态码，所以我们需要在发生这种系统错误时也能返回我们自定义的那种数据格式，那就要自定义一个异常处理类，通过这个类既可以返回统一的格式，也可以统一记录异常日志。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springboot_item.entities.ResponseData;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.NoHandlerFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseData</span> <span class="title">defaultErrorHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        logger.error(<span class="string">""</span>,e);</span><br><span class="line">        ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">        responseData.setMessage(e.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> NoHandlerFoundException)&#123;</span><br><span class="line">            responseData.setCode(<span class="number">404</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            responseData.setCode(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        responseData.setData(<span class="keyword">null</span>);</span><br><span class="line">        responseData.setStatus(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> responseData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResponseData是我们返回格式的实体类，其发生错误时也会被捕获到，然后封装好返回格式并返回给调用方。最后关键的一步就是，在Spring Boot的配置文件中添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 出现错误时, 直接抛出异常</span><br><span class="line">spring.mvc.<span class="keyword">throw</span>-exception-<span class="keyword">if</span>-no-handler-found=<span class="keyword">true</span></span><br><span class="line"># 不要为我们工程中的资源文件建立映射</span><br><span class="line">spring.resources.add-mappings=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>然后当我们调用一个不存在的接口时，返回的错误信息就是我们自定义的那种格式了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"status"</span>:<span class="keyword">false</span>,</span><br><span class="line">    <span class="string">"code"</span>:<span class="number">404</span>,</span><br><span class="line">    <span class="string">"message"</span>:<span class="string">"No handler found for GET /a"</span>,</span><br><span class="line">    <span class="string">"data"</span>:<span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后贴上ResponseData的定义，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean status = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"><span class="comment">// getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-异步执行"><a href="#2-5-异步执行" class="headerlink" title="2.5 异步执行"></a>2.5 异步执行</h2><p>异步调用就是不用等待结果的返回就执行后面的逻辑；同步调用则需要等待结果的返回再执行后面的逻辑。</p><p>通常我们使用异步操作时都会创建一个线程执行一段逻辑，然后把这个线程丢到线程池中去执行，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方式尽管使用了Lambda，但看起来没那么优雅。在Spring中有一种更加简单的方式来执行异步操作，只需要一个@Async注解即可，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.err.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以直接在controller中调用这个业务方法，它就是异步执行的，会在默认的线程池中去执行。需要注意的是，一定要在外部的类中调用这个方法，如果在在本类调用则不起作用，比如this.saveLog()。最后在启动类上开启异步任务的执行，添加@EnableAsync注解即可。</p><p>另外，关于执行异步任务的线程池我们也可以自定义，首先我们定义一个线程池的配置类，用来配置一些参数，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.task.pool"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//核心线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最大线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池维护线程所允许的空闲时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程名称前缀</span></span><br><span class="line">    <span class="keyword">private</span> String threadNamePrefix = <span class="string">"SPR-AsyncTask-"</span>;</span><br><span class="line"><span class="comment">//getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们重新定义线程池的配置，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskExecutePool</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(AsyncTaskExecutePool<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskThreadPoolConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line"></span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line">        executor.setThreadNamePrefix(config.getThreadNamePrefix());</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//异步任务中异常处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncUncaughtExceptionHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleUncaughtException</span><span class="params">(Throwable throwable, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                logger.error(<span class="string">"==============="</span> + throwable.getMessage() + <span class="string">"============"</span>);</span><br><span class="line">                logger.error(<span class="string">"exception method : "</span> + method.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完之后，这异步任务执行的线程池就是我们自定义的了，我们可以在属性文件里配置线程池的大小等信息，也可以使用默认的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.task.pool.maxPoolSize=<span class="number">100</span></span><br></pre></td></tr></table></figure><p>最后讲一下线程池配置的拒绝策略。当我们的线程数量高于线程池的处理速度时，任务会被缓存到本地的队列中。队列也是有大小的，如果超过了这个大小，就需要有拒绝的策略，不然就会出现内存溢出。目前支持两种拒绝策略：</p><ul><li>AbortPolicy ：直接抛出java.util.concurrent.RejectedExecutionException异常。</li><li>CallerRunsPolicy : 主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，这样可以有效降低线程池内添加任务的速度。</li></ul><p>建议大家用CallerRunsPolicy策略，因为当队列中的任务满了之后，如果直接抛异常，那么这个任务就会被丢弃。如果是CallerRunsPolicy策略，则会用主线程去执行，也就是同步执行，这样操作最起码任务不会被丢弃。</p><h2 id="2-6-随机端口"><a href="#2-6-随机端口" class="headerlink" title="2.6 随机端口"></a>2.6 随机端口</h2><p>在实际的开发过程中，每个项目的端口都是定好的，通过server.port可以指定端口。</p><p>当一个服务想要启动多个实例时，就需要改变端口，特别是在我们后面进行Spring Cloud学习的时候，服务都会注册到注册中心里去，为了能够让服务随时都可以扩容，在服务启动的时候能随机生成一个可以使用的端口是最好不过的。</p><p>在Spring Boot中，可以通过${random}来生成随机数字，我们可以这样使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=$&#123;random.<span class="keyword">int</span>[<span class="number">2000</span>,<span class="number">8000</span>]&#125;</span><br></pre></td></tr></table></figure><p>通过random.in方法，指定随机数的访问，生成一个在2000到8000之间的数字，这样每次启动的端口就都不一样了。</p><p>其实上面的方法虽然能够达到预期的效果，但是也会存在一些问题：如果这个端口已经在使用了，那么启动必然会报错。所以我们可以考虑通过代码的方式来随机生成一个端口，然后检测是否被使用，这样就能生成一个没有被使用的端口。</p><p>编写一个启动参数设置类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springboot_item.utils.ServerPortUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartCommand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(StartCommand<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StartCommand</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Boolean isServerPort = <span class="keyword">false</span>;</span><br><span class="line">        String serverPort = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(args != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">                <span class="keyword">if</span>(StringUtils.hasText(arg) &amp;&amp; arg.startsWith(<span class="string">"--server.port"</span>))&#123;</span><br><span class="line">                    isServerPort = <span class="keyword">true</span>;</span><br><span class="line">                    serverPort = arg;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isServerPort)&#123;</span><br><span class="line">            <span class="keyword">int</span> port = ServerPortUtils.getAvailablePort();</span><br><span class="line">            logger.info(<span class="string">"current server.port = "</span> + port);</span><br><span class="line">            System.setProperty(<span class="string">"server.port"</span>, String.valueOf(port));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"current server.port = "</span> + serverPort.split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">            System.setProperty(<span class="string">"server.port"</span>,serverPort.split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对启动参数进行遍历判断，如果有指定启动端口，后续就不自动生成了；如果没有指定，就通过ServerPortUtils获取一个可以使用的端口，然后设置到环境变量中。在application.properties中通过下面的方式获取端口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=$&#123;server.port&#125;</span><br></pre></td></tr></table></figure><p>关于获取可用端口的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerPortUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAvailablePort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">2000</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">65535</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> port = random.nextInt(max) % (max - min + <span class="number">1</span>) + min;</span><br><span class="line">        <span class="keyword">boolean</span> using = NetUtils.isLoclePortUsing(port);</span><br><span class="line">        <span class="keyword">if</span>(using)&#123;</span><br><span class="line">            <span class="keyword">return</span> getAvailablePort();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoclePortUsing</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flag = isPortUsing(<span class="string">"127.0.0.1"</span>, port);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPortUsing</span><span class="params">(String host,<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        InetAddress theAddress = InetAddress.getByName(host);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(theAddress,port);</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取可用端口的主要逻辑是指定一个范围，然后生成随机数字，最后通过NetUtils来检查端口是否可用。如果获取到可用的端口则直接返回，没有获取到可用的端口则执行回调逻辑，重新获取。检验端口是否可用主要是用Socket来判断这个端口是否可以被连接。</p><p>最后在启动类中调用端口即可使用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.springboot_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.springboot_item.config.StartCommand;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootItemApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> StartCommand(args);</span><br><span class="line">        SpringApplication.run(SpringbootItemApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，这里随机生成的端口44342，如下图：</p><p><img src="/img/springcloud/springboot_item/port.png" alt=""></p><h2 id="2-7-编译打包"><a href="#2-7-编译打包" class="headerlink" title="2.7 编译打包"></a>2.7 编译打包</h2><p>传统的Web项目在部署的时候，是编译出一个war包放到Tomcat的webapps目录下。而在Spring Boot构建的Web项目中则打破了这一传统部署方式，他采用更加简单的内置容器方式来部署应用程序，只需要将应用编译打包成一个jar包，直接可以通过java -jar命令启动应用。</p><p>在pom.xml中添加打包的Maven插件，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                  &lt;executable&gt;true&lt;/executable&gt;</span><br><span class="line">                   &lt;mainClass&gt;com.self.springboot_item.SpringbootItemApplication&lt;/mainClass&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">           &lt;!-- 编译插件, 指定JDK版本 --&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                   &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure><p>mainClass配置的是我们的启动入口类，配置完成后可以通过Maven 的 mvn clean package 命令进行编译打包操作。编译完成后在target目录下回生成对应的jar包，部署时直接调用java -jar xxx.jar即可启动应用。</p><p>结果如下图：</p><p><img src="/img/springcloud/springboot_item/package.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="SpringBoot" scheme="https://xiaozeng26.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>单链表的增删改查</title>
    <link href="https://xiaozeng26.github.io/2020/07/11/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://xiaozeng26.github.io/2020/07/11/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2020-07-11T09:18:53.000Z</published>
    <updated>2020-07-11T15:55:42.491Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-链表（Linked-List）介绍"><a href="#1-链表（Linked-List）介绍" class="headerlink" title="1. 链表（Linked List）介绍"></a>1. 链表（Linked List）介绍</h1><p>链表是有序的列表，它在内存中的存储结构如下：</p><p><img src="/img/DataStructure/%E5%8D%95%E9%93%BE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt=""></p><p>1）链表是以节点的方式来存储，是链式存储。</p><p>2）每个节点包含data域，next域：指向下一个节点。</p><p>3）<strong>链表的各个节点不一定是连续存储。</strong></p><p>4）链表分<strong>带头节点</strong>的链表和<strong>不带头节点</strong>的链表，根据实际的需求来确定。</p><ul><li>单链表（带头节点）的逻辑结构示意图如下：</li></ul><p><img src="/img/DataStructure/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%A6%E5%A4%B4%E8%8A%82%E7%82%B9%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt=""></p><h1 id="2-单链表的增删改查"><a href="#2-单链表的增删改查" class="headerlink" title="2. 单链表的增删改查"></a>2. 单链表的增删改查</h1><p><strong>【注】下面的所有单链表操作均是使用带 head 头的单向链表实现 - 实现对水浒英雄排行榜管理，完成对英雄人物的增删改查。</strong></p><h2 id="2-1-链表添加操作"><a href="#2-1-链表添加操作" class="headerlink" title="2.1 链表添加操作"></a>2.1 链表添加操作</h2><h3 id="2-1-1-直接添加到链表的尾部-不需要对编号排序"><a href="#2-1-1-直接添加到链表的尾部-不需要对编号排序" class="headerlink" title="2.1.1 直接添加到链表的尾部(不需要对编号排序)"></a>2.1.1 直接添加到链表的尾部(不需要对编号排序)</h3><p>思路分析：</p><p><img src="/img/DataStructure/LinkedListAdd.png" alt=""></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListAdd</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//进行测试</span></span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        HeroNodeAdd hero1 = <span class="keyword">new</span> HeroNodeAdd(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"及时雨"</span>);</span><br><span class="line">        HeroNodeAdd hero2 = <span class="keyword">new</span> HeroNodeAdd(<span class="number">2</span>, <span class="string">"卢俊义"</span>, <span class="string">"玉麒麟"</span>);</span><br><span class="line">        HeroNodeAdd hero3 = <span class="keyword">new</span> HeroNodeAdd(<span class="number">3</span>, <span class="string">"吴用"</span>, <span class="string">"智多星"</span>);</span><br><span class="line">        HeroNodeAdd hero4 = <span class="keyword">new</span> HeroNodeAdd(<span class="number">4</span>, <span class="string">"林冲"</span>, <span class="string">"豹子头"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建链表</span></span><br><span class="line">        SingleLinkedList_add singleLinkedList = <span class="keyword">new</span> SingleLinkedList_add();</span><br><span class="line">        <span class="comment">//将节点加入</span></span><br><span class="line">        singleLinkedList.add(hero1);</span><br><span class="line">        singleLinkedList.add(hero2);</span><br><span class="line">        singleLinkedList.add(hero3);</span><br><span class="line">        singleLinkedList.add(hero4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示链表</span></span><br><span class="line">        singleLinkedList.showLinkedList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList_add</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化头结点，一般头结点不能更改，要不然之后的节点数据将找不到</span></span><br><span class="line">    <span class="keyword">private</span> HeroNodeAdd head = <span class="keyword">new</span> HeroNodeAdd(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点到单向链表（找到链表的最后一个节点，让它指向新添加的节点，并将其next的null去掉）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNodeAdd heroNodeAdd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历变量 temp</span></span><br><span class="line">        HeroNodeAdd temp = head;</span><br><span class="line">        <span class="comment">//遍历链表，找到最后的节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//链表的最后一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没有找到最后，就将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出了while循环时，temp就已经指向了链表的最后一个节点</span></span><br><span class="line">        <span class="comment">//然后将最后这个的节点指向新添加的节点</span></span><br><span class="line">        temp.next = heroNodeAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示链表【遍历】</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"链表为空~"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为head节点不能动，所以定义辅助变量进行遍历</span></span><br><span class="line">        <span class="comment">//这里的 temp 表示链表的最后一个节点.next</span></span><br><span class="line">        HeroNodeAdd temp = head.next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            <span class="comment">//将temp后移（输出一个节点信息后，temp后移才能输出下一个节点）</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个HeroNode，每一个HeroNode对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNodeAdd</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="keyword">public</span> HeroNodeAdd next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNodeAdd</span><span class="params">(<span class="keyword">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNodeAdd&#123;"</span> +</span><br><span class="line">                <span class="string">"no='"</span> + no + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果截图：</p><p><img src="/img/DataStructure/LinkedListAdd%E6%95%88%E6%9E%9C.png" alt=""></p><h3 id="2-1-2-根据编号添加到指定位置"><a href="#2-1-2-根据编号添加到指定位置" class="headerlink" title="2.1.2 根据编号添加到指定位置"></a>2.1.2 根据编号添加到指定位置</h3><p>思路分析：</p><p><img src="/img/DataStructure/LinkedListAddOrder.png" alt=""></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListAddOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行测试</span></span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        HeroNodeAddOrder hero1 = <span class="keyword">new</span> HeroNodeAddOrder(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"及时雨"</span>);</span><br><span class="line">        HeroNodeAddOrder hero2 = <span class="keyword">new</span> HeroNodeAddOrder(<span class="number">2</span>, <span class="string">"卢俊义"</span>, <span class="string">"玉麒麟"</span>);</span><br><span class="line">        HeroNodeAddOrder hero3 = <span class="keyword">new</span> HeroNodeAddOrder(<span class="number">3</span>, <span class="string">"吴用"</span>, <span class="string">"智多星"</span>);</span><br><span class="line">        HeroNodeAddOrder hero4 = <span class="keyword">new</span> HeroNodeAddOrder(<span class="number">4</span>, <span class="string">"林冲"</span>, <span class="string">"豹子头"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建链表</span></span><br><span class="line">        SingleLinkedList_addOrder singleLinkedList = <span class="keyword">new</span> SingleLinkedList_addOrder();</span><br><span class="line">        <span class="comment">//将节点加入</span></span><br><span class="line">        singleLinkedList.addByOrder(hero1);</span><br><span class="line">        singleLinkedList.addByOrder(hero3);</span><br><span class="line">        singleLinkedList.addByOrder(hero4);</span><br><span class="line">        singleLinkedList.addByOrder(hero2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示链表</span></span><br><span class="line">        singleLinkedList.showLinkedList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList_addOrder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化头结点，一般头结点不能更改，要不然之后的节点数据将找不到</span></span><br><span class="line">    <span class="keyword">private</span> HeroNodeAddOrder head = <span class="keyword">new</span> HeroNodeAddOrder(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种方式在添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line">    <span class="comment">// (如果有这个排名，则添加失败，并给出提示)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNodeAddOrder heroNodeAddOrder)</span></span>&#123;</span><br><span class="line">        <span class="comment">//因为头结点不能动，因此我们仍然通过一个辅助变量来帮助找到添加的位置</span></span><br><span class="line">        <span class="comment">//注意：单链表要找的是添加位置的前一个节点，若是找到了后一个节点将无法添加</span></span><br><span class="line">        HeroNodeAddOrder temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//标识添加的编号是否存在，默认为false</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123; <span class="comment">//说明temp已经到了链表的最后</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.next.no &gt; heroNodeAddOrder.no)&#123; <span class="comment">//找到位置，就在temp的后面插入（即：新添加的节点需要在temp和temp.next中插入）</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (temp.next.no == heroNodeAddOrder.no)&#123; <span class="comment">//说明需要添加的节点编号已经存在</span></span><br><span class="line">                flag = <span class="keyword">true</span>; <span class="comment">//编号存在</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;<span class="comment">//若找不到，temp后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断flag 的值</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123; <span class="comment">//不能添加，编号已经存在</span></span><br><span class="line">            System.out.printf(<span class="string">"准备插入的英雄的编号 %d 已经存在,不能再次添加\n"</span>,heroNodeAddOrder.no);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line">            heroNodeAddOrder.next = temp.next;</span><br><span class="line">            temp.next = heroNodeAddOrder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示链表【遍历】</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"链表为空~"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为head节点不能动，所以定义辅助变量进行遍历</span></span><br><span class="line">        <span class="comment">//这里的 temp 表示链表的最后一个节点.next</span></span><br><span class="line">        HeroNodeAddOrder temp = head.next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            <span class="comment">//将temp后移（输出一个节点信息后，temp后移才能输出下一个节点）</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个HeroNode，每一个HeroNode对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNodeAddOrder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="keyword">public</span> HeroNodeAddOrder next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNodeAddOrder</span><span class="params">(<span class="keyword">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNodeAddOrder&#123;"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果截图：</p><p><img src="/img/DataStructure/LinkedListAddOrder%E6%95%88%E6%9E%9C.png" alt=""></p><h2 id="2-2-链表修改操作"><a href="#2-2-链表修改操作" class="headerlink" title="2.2 链表修改操作"></a>2.2 链表修改操作</h2><p>思路分析：</p><ol><li><p>通过遍历找到需要修改的节点</p></li><li><pre><code>temp.name = heroNodeUpdate.name;temp.nickname = heroNodeUpdate.nickname;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">代码实现：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">package com.self.linkedlist;</span><br><span class="line"></span><br><span class="line">public class SingleLinkedListUpdate &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;进行测试</span><br><span class="line">        &#x2F;&#x2F;创建节点</span><br><span class="line">        HeroNodeUpdate hero1 &#x3D; new HeroNodeUpdate(1, &quot;宋江&quot;, &quot;及时雨&quot;);</span><br><span class="line">        HeroNodeUpdate hero2 &#x3D; new HeroNodeUpdate(2, &quot;卢俊义&quot;, &quot;玉麒麟&quot;);</span><br><span class="line">        HeroNodeUpdate hero3 &#x3D; new HeroNodeUpdate(3, &quot;吴用&quot;, &quot;智多星&quot;);</span><br><span class="line">        HeroNodeUpdate hero4 &#x3D; new HeroNodeUpdate(4, &quot;林冲&quot;, &quot;豹子头&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;创建链表</span><br><span class="line">        SingleLinkedList_update singleLinkedList &#x3D; new SingleLinkedList_update();</span><br><span class="line">        &#x2F;&#x2F;将节点加入</span><br><span class="line">        singleLinkedList.add(hero1);</span><br><span class="line">        singleLinkedList.add(hero2);</span><br><span class="line">        singleLinkedList.add(hero3);</span><br><span class="line">        singleLinkedList.add(hero4);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;测试修改节点信息</span><br><span class="line">        System.out.println(&quot;修改前:&quot;);</span><br><span class="line">        singleLinkedList.showLinkedList();</span><br><span class="line"></span><br><span class="line">        HeroNodeUpdate newHeroNode &#x3D; new HeroNodeUpdate(2, &quot;小卢&quot;, &quot;玉麒麟~~&quot;);</span><br><span class="line">        singleLinkedList.update(newHeroNode);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;修改后:&quot;);</span><br><span class="line">        singleLinkedList.showLinkedList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义SingleLinkedList 管理我们的英雄</span><br><span class="line">class SingleLinkedList_update&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;初始化头结点，一般头结点不能更改，要不然之后的节点数据将找不到</span><br><span class="line">    private HeroNodeUpdate head &#x3D; new HeroNodeUpdate(0,&quot;&quot;,&quot;&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;添加节点到单向链表（找到链表的最后一个节点，让它指向新添加的节点，并将其next的null去掉）</span><br><span class="line">    public void add(HeroNodeUpdate heroNodeUpdate)&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;因为head节点不能动，因此我们需要一个辅助遍历变量 temp</span><br><span class="line">        HeroNodeUpdate temp &#x3D; head;</span><br><span class="line">        &#x2F;&#x2F;遍历链表，找到最后的节点</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            &#x2F;&#x2F;链表的最后一个节点</span><br><span class="line">            if(temp.next &#x3D;&#x3D; null)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;如果没有找到最后，就将temp后移</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;当退出了while循环时，temp就已经指向了链表的最后一个节点</span><br><span class="line">        &#x2F;&#x2F;然后将最后这个的节点指向新添加的节点</span><br><span class="line">        temp.next &#x3D; heroNodeUpdate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 修改节点的信息，根据no编号进行修改，即no不能进行修改</span><br><span class="line">     * 说明：</span><br><span class="line">     *      1.heroNode的no来修改即可</span><br><span class="line">     * @param heroNodeUpdate</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void update(HeroNodeUpdate heroNodeUpdate)&#123;</span><br><span class="line">        if(head.next &#x3D;&#x3D; null)&#123;</span><br><span class="line">            System.out.println(&quot;链表为空~&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;找到需要修改的节点，根据no编号修改，</span><br><span class="line">        &#x2F;&#x2F;定义temp辅助变量，</span><br><span class="line">        HeroNodeUpdate temp &#x3D; head.next;</span><br><span class="line">        boolean flag &#x3D; false;&#x2F;&#x2F;表示是否找到了该节点</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if (temp &#x3D;&#x3D; null) &#123;&#x2F;&#x2F;已经遍历完这个链表了</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            if (temp.no &#x3D;&#x3D; heroNodeUpdate.no) &#123; &#x2F;&#x2F;找到需要修改的节点</span><br><span class="line">                flag &#x3D; true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;若没有找到，temp后移</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;根据flag判断是否找到了要修改的节点</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">            temp.name &#x3D; heroNodeUpdate.name;</span><br><span class="line">            temp.nickname &#x3D; heroNodeUpdate.nickname;</span><br><span class="line">        &#125;else &#123;&#x2F;&#x2F;没有找到</span><br><span class="line">            System.out.printf(&quot;没有找到编号为 %d 的节点编号，不能进行修改\n&quot;,heroNodeUpdate.no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;显示链表【遍历】</span><br><span class="line">    public void showLinkedList()&#123;</span><br><span class="line">        &#x2F;&#x2F;判断链表是否为空</span><br><span class="line">        if(head.next &#x3D;&#x3D; null)&#123;</span><br><span class="line">            System.out.println(&quot;链表为空~&quot;);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;因为head节点不能动，所以定义辅助变量进行遍历</span><br><span class="line">        &#x2F;&#x2F;这里的 temp 表示链表的最后一个节点.next</span><br><span class="line">        HeroNodeUpdate temp &#x3D; head.next;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            &#x2F;&#x2F;判断是否到链表最后</span><br><span class="line">            if(temp &#x3D;&#x3D; null)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;输出节点的信息</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            &#x2F;&#x2F;将temp后移（输出一个节点信息后，temp后移才能输出下一个节点）</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个HeroNode，每一个HeroNode对象就是一个节点</span><br><span class="line">class HeroNodeUpdate &#123;</span><br><span class="line"></span><br><span class="line">    public int no;</span><br><span class="line">    public String name;</span><br><span class="line">    public String nickname;</span><br><span class="line">    public HeroNodeUpdate next;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构造器</span><br><span class="line">    public HeroNodeUpdate(int no, String name, String nickname) &#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.nickname &#x3D; nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;toString</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;HeroNodeUpdate&#123;&quot; +</span><br><span class="line">                &quot;no&#x3D;&quot; + no +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, nickname&#x3D;&#39;&quot; + nickname + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>效果截图：</p><p><img src="/img/DataStructure/LinkedListUpdate%E6%95%88%E6%9E%9C.png" alt=""></p><h2 id="2-3-链表删除操作"><a href="#2-3-链表删除操作" class="headerlink" title="2.3 链表删除操作"></a>2.3 链表删除操作</h2><p>思路分析：</p><p><img src="/img/DataStructure/LinkedListDel.png" alt=""></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListDel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//进行测试</span></span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        HeroNodeDel hero1 = <span class="keyword">new</span> HeroNodeDel(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"及时雨"</span>);</span><br><span class="line">        HeroNodeDel hero2 = <span class="keyword">new</span> HeroNodeDel(<span class="number">2</span>, <span class="string">"卢俊义"</span>, <span class="string">"玉麒麟"</span>);</span><br><span class="line">        HeroNodeDel hero3 = <span class="keyword">new</span> HeroNodeDel(<span class="number">3</span>, <span class="string">"吴用"</span>, <span class="string">"智多星"</span>);</span><br><span class="line">        HeroNodeDel hero4 = <span class="keyword">new</span> HeroNodeDel(<span class="number">4</span>, <span class="string">"林冲"</span>, <span class="string">"豹子头"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建链表</span></span><br><span class="line">        SingleLinkedList_del singleLinkedList = <span class="keyword">new</span> SingleLinkedList_del();</span><br><span class="line">        <span class="comment">//将节点加入</span></span><br><span class="line">        singleLinkedList.add(hero1);</span><br><span class="line">        singleLinkedList.add(hero2);</span><br><span class="line">        singleLinkedList.add(hero3);</span><br><span class="line">        singleLinkedList.add(hero4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示</span></span><br><span class="line">        singleLinkedList.showLinkedList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除一个节点</span></span><br><span class="line">        singleLinkedList.delete(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"删除后："</span>);</span><br><span class="line">        singleLinkedList.showLinkedList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList_del</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化头结点，一般头结点不能更改，要不然之后的节点数据将找不到</span></span><br><span class="line">    <span class="keyword">private</span> HeroNodeDel head = <span class="keyword">new</span> HeroNodeDel(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点到单向链表（找到链表的最后一个节点，让它指向新添加的节点，并将其next的null去掉）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNodeDel heroNodeDel)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历变量 temp</span></span><br><span class="line">        HeroNodeDel temp = head;</span><br><span class="line">        <span class="comment">//遍历链表，找到最后的节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//链表的最后一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没有找到最后，就将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出了while循环时，temp就已经指向了链表的最后一个节点</span></span><br><span class="line">        <span class="comment">//然后将最后这个的节点指向新添加的节点</span></span><br><span class="line">        temp.next = heroNodeDel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点：</span></span><br><span class="line"><span class="comment">     *      思路：</span></span><br><span class="line"><span class="comment">     *          1. head 不能动，因此需要一个temp辅助节点找到待删除节点的前一个节点(temp.next.no和待删除节点的no进行比较)</span></span><br><span class="line"><span class="comment">     *          2. temp.next = temp.next.next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        HeroNodeDel temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">//是否找到待删除节点的前一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)&#123;<span class="comment">//已经到链表最后</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.next.no == no)&#123; <span class="comment">//找到了待删除节点的前一个节点temp</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next; <span class="comment">//若没找到，继续讲temp后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断flag</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;<span class="comment">//找到</span></span><br><span class="line">            <span class="comment">//可以删除</span></span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"要删除的 %d 节点不存在，无法删除"</span>,no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示链表【遍历】</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"链表为空~"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为head节点不能动，所以定义辅助变量进行遍历</span></span><br><span class="line">        <span class="comment">//这里的 temp 表示链表的最后一个节点.next</span></span><br><span class="line">        HeroNodeDel temp = head.next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            <span class="comment">//将temp后移（输出一个节点信息后，temp后移才能输出下一个节点）</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个HeroNode，每一个HeroNode对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNodeDel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="keyword">public</span> HeroNodeDel next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNodeDel</span><span class="params">(<span class="keyword">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNodeDel&#123;"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果截图：</p><p><img src="/img/DataStructure/LinkedListDel%E6%95%88%E6%9E%9C.png" alt=""></p><p>以上就是单链表实现增删改查的全部过程！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://xiaozeng26.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="单链表的增删改查" scheme="https://xiaozeng26.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>数组模拟环形队列</title>
    <link href="https://xiaozeng26.github.io/2020/07/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/"/>
    <id>https://xiaozeng26.github.io/2020/07/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/</id>
    <published>2020-07-08T23:45:27.000Z</published>
    <updated>2020-07-09T00:25:41.872Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-思路分析"><a href="#1-思路分析" class="headerlink" title="1. 思路分析"></a>1. 思路分析</h1><p>1）尾索引的下一个为头索引时表示队满，即：将队列容量空出一个作为约定，这个在做判断队列满的时候要注意 (rear + 1) % maxSize == front 【满】</p><p>2）rear == front 【空】</p><p>3）(rear + maxSize -front) % maxSize 【环形队列有效数据个数】</p><p><strong>图示：</strong></p><p><img src="/img/DataStructure/CircleQueue%E5%9B%BE%E7%A4%BA1.png" alt=""></p><p>思路如下：</p><ol><li>front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素</li></ol><p>front 的初始值 = 0</p><ol start="2"><li>rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.</li></ol><p>rear 的初始值 = 0</p><ol start="3"><li><p>当队列满时，条件是 (rear + 1) % maxSize == front 【满】</p></li><li><p>对队列为空的条件， rear == front 空</p></li><li><p>当我们这样分析， 队列中有效的数据的个数  (rear + maxSize - front) % maxSize  // rear = 1 front = 0 </p></li><li><p>我们就可以在原来的队列上修改得到，一个环形队列</p></li></ol><p><img src="/img/DataStructure/CircleQueue%E5%9B%BE%E7%A4%BA2.jpg" alt=""></p><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySimulateCircleQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试一把</span></span><br><span class="line">        System.out.println(<span class="string">"测试数组模拟环形队列的案例~~"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个环形队列</span></span><br><span class="line">        CircleQueue queue = <span class="keyword">new</span> CircleQueue(<span class="number">4</span>);<span class="comment">//设置4时，其队列的有效数据最大是3</span></span><br><span class="line">        <span class="keyword">char</span> key = <span class="string">' '</span>; <span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">"s(show): 显示队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"e(exit): 退出程序"</span>);</span><br><span class="line">            System.out.println(<span class="string">"a(add): 添加数据到队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"g(get): 从队列中取出数据"</span>);</span><br><span class="line">            System.out.println(<span class="string">"h(head): 查看队列头的数据"</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//这句话表示接收一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    queue.showQueue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入一个数："</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    queue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">//查看队列头数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"队列头的数据是%d\n"</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:  <span class="comment">//退出</span></span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序退出~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组模拟环形队列 -- 编写一个CircleQueue类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleQueue</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">//该数组用于存储数据，模拟队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="comment">//front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素; front 的初始值 = 0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front; <span class="comment">//队列头</span></span><br><span class="line">    <span class="comment">//rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.; rear 的初始值 = 0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear; <span class="comment">//队列尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建队列的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">        maxSize = arrMaxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        <span class="comment">//front 和rear默认就是0，可以不写</span></span><br><span class="line">        <span class="comment">//front = 0;</span></span><br><span class="line">        <span class="comment">//rear = 0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.添加数据到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否满</span></span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列满，不能加入数据~"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接将数据加入</span></span><br><span class="line">        arr[rear] = n;</span><br><span class="line">        <span class="comment">//将rear后移，这里必须考虑取模</span></span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.获取队列的数据，出队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否空</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，不能取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要分析出front是指向队列的第一个元素</span></span><br><span class="line">        <span class="comment">//1.先把front 对应的值保留到一个临时变量</span></span><br><span class="line">        <span class="comment">//2.将front后移,考虑取模</span></span><br><span class="line">        <span class="comment">//3.将临时保存的变量返回</span></span><br><span class="line">        <span class="keyword">int</span> value = arr[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列是空的，没有数据~"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//思路：从front开始遍历，遍历多少个元素</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i % maxSize,arr[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.求出当前队列有效数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//比如： rear = 1,front = 0,maxSize = 3</span></span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize -front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.显示队列的头数据，注意并不是取出数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列是空的,没有数据~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-代码的简单解析"><a href="#3-代码的简单解析" class="headerlink" title="3.代码的简单解析"></a>3.代码的简单解析</h1><ol><li>创建队列的构造器：初始化队列，front 和 rear 指针初始值为 0；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>判断队列是否满:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>判断队列是否为空</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加数据到队列,入队</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>获取队列的数据，出队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>显示队列的所有数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>求出当前队列有效数据的个数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>显示队列的头数据，注意并不是取出数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>数组实现环形队列解决了队列不能复用的问题。</p><p>运行过程这里不再叙述，请大家自己测试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://xiaozeng26.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组模拟环形队列" scheme="https://xiaozeng26.github.io/tags/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数组模拟队列</title>
    <link href="https://xiaozeng26.github.io/2020/07/08/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97/"/>
    <id>https://xiaozeng26.github.io/2020/07/08/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97/</id>
    <published>2020-07-08T08:42:21.000Z</published>
    <updated>2020-07-08T10:55:35.490Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-队列的介绍"><a href="#1-队列的介绍" class="headerlink" title="1. 队列的介绍"></a>1. 队列的介绍</h1><p>1）队列是一个有序列表，可以用数组或是链表来实现。</p><p>2）遵循先进先出的原则。即：**先进队列的数据，要先取出。后进的要后取出。</p><p>3）示意图：</p><p><img src="/img/DataStructure/%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><h1 id="2-数组模拟队列思路"><a href="#2-数组模拟队列思路" class="headerlink" title="2. 数组模拟队列思路"></a>2. 数组模拟队列思路</h1><ul><li>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图，其中maxSize是该队列的最大容量。</li><li>因为队列的输出、输入是分别从前后端来处理的，因此需要两个变量front及rear分别记录队列前后端的下标，front会随着队列的输出而改变，而rear则会随着数据的输入而改变。如图所示：</li></ul><p><img src="/img/DataStructure/%E7%A4%BA%E6%84%8F%E5%9B%BE2.png" alt=""></p><ul><li>当将数据存入队列时称为”addQueue”, addQueue 的处理需要有两个步骤：</li></ul><p>1）将尾指针后移：rear + 1，当 front == rear 【空】</p><p>2）若尾指针 rear 小于队列的最大下标 maxSize -1,则将数据存入rear所指的数组元素中，否则无法存入数据。rear == maxSize - 1 【满】</p><p><strong>【注意】:  队列的实现最重要的就是知道何时队列为空，何时队列为满。</strong></p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySimulateQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试一把</span></span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        ArrayQueue queue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">char</span> key = <span class="string">' '</span>; <span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">"s(show): 显示队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"e(exit): 退出程序"</span>);</span><br><span class="line">            System.out.println(<span class="string">"a(add): 添加数据到队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"g(get): 从队列中取出数据"</span>);</span><br><span class="line">            System.out.println(<span class="string">"h(head): 查看队列头的数据"</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//这句话表示接收一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    queue.showQueue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入一个数："</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    queue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">//查看队列头数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"队列头的数据是%d\n"</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:  <span class="comment">//退出</span></span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序退出~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组模拟队列 -- 编写一个ArrayQueue类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">//该数组用于存储数据，模拟队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front; <span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear; <span class="comment">//队列尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建队列的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">        maxSize = arrMaxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        front = -<span class="number">1</span>; <span class="comment">//指向队列头，分析出front是指向队列头的前一个位置</span></span><br><span class="line">        rear = -<span class="number">1</span>;  <span class="comment">//指向队列尾，指向队列尾的数据（即就是队列最后一个数据）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rear == maxSize -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.添加数据到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否满</span></span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列满，不能加入数据~"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        rear++;<span class="comment">//rear后移</span></span><br><span class="line">        arr[rear] = n;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.获取队列的数据，出队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否空</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，不能取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列是空的，没有数据~"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.显示队列的头数据，注意并不是取出数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列是空的,没有数据~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-代码的简单解析"><a href="#4-代码的简单解析" class="headerlink" title="4. 代码的简单解析"></a>4. 代码的简单解析</h1><p>代码中共有七个方法：</p><ol><li>初始化队列的方法：定义队列最大容量，队头指针，队尾指针的位置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>判断队列是否为满：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>判断队列是否为空:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加数据到队列:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>从队列中获取数据 , 出队列：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>显示队列的所有数据：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>显示队列的头数据，注意并不是取出数据:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="5-问题分析："><a href="#5-问题分析：" class="headerlink" title="5. 问题分析："></a>5. 问题分析：</h1><p>上述方法是可以实现数组模拟队列的效果，但是数组只能使用一次，不能重复的使用，无法实现复用的效果。</p><p>之后会出<strong>数组模拟环形队列</strong>的实现，将会解决这个问题，感兴趣的朋友可以多关注一下…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://xiaozeng26.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组模拟队列" scheme="https://xiaozeng26.github.io/tags/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>二维数组与稀疏数组的转换</title>
    <link href="https://xiaozeng26.github.io/2020/07/06/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%8E%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://xiaozeng26.github.io/2020/07/06/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%8E%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-07-06T15:37:36.000Z</published>
    <updated>2020-07-07T01:37:18.627Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-图解"><a href="#1-图解" class="headerlink" title="1. 图解"></a>1. 图解</h1><p><img src="/img/DataStructure/SparseArray.png" alt=""></p><p>这个教程的讲解是以五子棋棋盘落子的应用场景来介绍的，棋盘就相当于一个二维数组，其中 0表示无子，1表示黑子，2表示蓝子。</p><h1 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h1><h2 id="2-1-二维数组转换成稀疏数组："><a href="#2-1-二维数组转换成稀疏数组：" class="headerlink" title="2.1 二维数组转换成稀疏数组："></a>2.1 二维数组转换成稀疏数组：</h2><ol><li>遍历原始的二维数组，获取有效数据的个数 <strong>sum</strong>；</li><li>根据有效数据个数 <strong>sum</strong> 创建一个稀疏数组 sparseArr int[sum + 1] [3];</li><li>将二维数组的有效数据存入到稀疏数组中；</li></ol><h2 id="2-2-稀疏数组转换成二维数组"><a href="#2-2-稀疏数组转换成二维数组" class="headerlink" title="2.2 稀疏数组转换成二维数组"></a>2.2 稀疏数组转换成二维数组</h2><ol><li>先读取稀疏矩阵的第一行数据，根据第一行数据创建原始的二维数组，比如上图所示 beginArr int[11] [11];</li><li>再读取稀疏数组后面的几行数据，并赋值给原始的二维数组即可；</li></ol><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.sparsearray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建原始的二维数组</span></span><br><span class="line">        <span class="comment">//0:表示没有棋子 1：表示黑子 2：表示蓝子</span></span><br><span class="line">        <span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;<span class="comment">//第二行第三列的是黑子</span></span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;<span class="comment">//第三行第四列表示蓝子</span></span><br><span class="line">        <span class="comment">//输出原始的二维数组</span></span><br><span class="line">        System.out.println(<span class="string">"原始的二维数组:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data: row)&#123;</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将二维数组 转 稀疏数组思路</span></span><br><span class="line">        <span class="comment">//1.遍历原始的二维数组得到有效数据的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(chessArr1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sum="</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建对应的稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> sparseArr[][] =  <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//3.给稀疏数组赋值</span></span><br><span class="line">        <span class="comment">//第一行</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把二维数组有效数据遍历赋值给稀疏数组sparseArr中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//count 用于记录是第几个非0数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(chessArr1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出稀疏数组形式</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"转换后得到的稀疏数组："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%d\t%d\t%d\t\n"</span>, sparseArr[i][<span class="number">0</span>],sparseArr[i][<span class="number">1</span>],sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//==========================================================================</span></span><br><span class="line">        <span class="comment">//将稀疏数组恢复成原始的二维数组</span></span><br><span class="line">        <span class="comment">//1.先读取稀疏数组第一行，根据第一行数据，创建原始的二维数组</span></span><br><span class="line">        <span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取稀疏数组的后几行(第二行开始)，并赋给原始的二维数组即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt; sparseArr.length ; i++)&#123;</span><br><span class="line">            chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出恢复后的二维数组</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"恢复后的二维数组:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data: row)&#123;</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>,data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果图：</strong></p><p><img src="/img/DataStructure/result1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://xiaozeng26.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线性结构之数组" scheme="https://xiaozeng26.github.io/tags/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>搭建分布式文件系统之FASTDFS</title>
    <link href="https://xiaozeng26.github.io/2020/06/02/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8BFASTDFS/"/>
    <id>https://xiaozeng26.github.io/2020/06/02/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8BFASTDFS/</id>
    <published>2020-06-02T01:27:23.000Z</published>
    <updated>2020-06-02T05:08:16.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-分布式文件系统介绍"><a href="#1-分布式文件系统介绍" class="headerlink" title="1. 分布式文件系统介绍"></a>1. 分布式文件系统介绍</h1><p>概述：FastDFS是一款开源的轻量级分布式文件系统，主要用它来对文件进行管理，功能包括：文件存储、文件同步、文件访问(文件上传、文件下载)等，解决了大容量存储和负载均衡的问题。</p><p>FastDFS服务端有两个角色：<strong>跟踪器(tracker)</strong>和<strong>存储节点(storage)</strong>。</p><p>跟踪器主要做调度工作，在访问上起负载均衡的作用。</p><p>存储节点主要的工作：存储、同步和提供存取接口。</p><p>FastDFS系统结构如下图所示：</p><p><img src="/img/FastDFS/archive.png" alt=""></p><p>工作原理说明：</p><p>跟踪器和存储节点都可以由一台或者多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。</p><p>为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷 的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起 到了冗余备份和负载均衡的作用。</p><p>在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。</p><p>当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</p><h1 id="2-文件上传流程"><a href="#2-文件上传流程" class="headerlink" title="2. 文件上传流程"></a>2. 文件上传流程</h1><p>FastDFS中的文件标识分为两部分：卷名和文件名，二者缺一不可。</p><p><img src="/img/FastDFS/upload.png" alt=""></p><p>文件上传的交互流程：</p><ol><li>client询问tracker可以执行上传操作的storage，不需要附加参数；</li><li>tracker返回一台可用的storage的ip地址和端口号。</li><li>client直接与storage通讯完成文件上传。</li></ol><h1 id="3-文件下载流程"><a href="#3-文件下载流程" class="headerlink" title="3. 文件下载流程"></a>3. 文件下载流程</h1><p><img src="/img/FastDFS/download.png" alt=""></p><p>文件下载的交互流程：</p><ol><li>client询问tracker下载文件的storage，参数为文件标识(卷名和文件名)。</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件的下载；</li></ol><p><strong>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</strong></p><h1 id="4-搭建服务器"><a href="#4-搭建服务器" class="headerlink" title="4. 搭建服务器"></a>4. 搭建服务器</h1><h2 id="4-1-安装依赖的环境"><a href="#4-1-安装依赖的环境" class="headerlink" title="4.1 安装依赖的环境"></a>4.1 安装依赖的环境</h2><p>安装FastDFS需要先从官网下载源码，然后进行编译，但是编译需要gcc环境，所以需要先安装gcc。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>FastDFS依赖于libevent库，需要安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install libevent</span><br></pre></td></tr></table></figure><h2 id="4-2-上传安装文件"><a href="#4-2-上传安装文件" class="headerlink" title="4.2 上传安装文件"></a>4.2 上传安装文件</h2><p>需要的安装文件如下，有需要的朋友就自己寻找到相应官网下载即可。</p><p><img src="/img/FastDFS/package.png" alt=""></p><p>在/usr/local/目录下新建fastdfs目录，然后按住alt+p键即可实现拖进虚拟机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local</span><br><span class="line"># mkdir fastdfs&#x2F;</span><br><span class="line">按住alt+p,并用cd切换到&#x2F;usr&#x2F;local&#x2F;fastdfs目录下进行拖拽</span><br></pre></td></tr></table></figure><p><img src="/img/FastDFS/alt_p.png" alt=""></p><h2 id="4-3-安装libfastcommon"><a href="#4-3-安装libfastcommon" class="headerlink" title="4.3 安装libfastcommon"></a>4.3 安装libfastcommon</h2><p>libfastcommon是FastDFS官方提供的，libfastcommon包含了FastDFS运行所需要的的一些基础库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;fastdfs</span><br><span class="line"># tar -zxvf libfastcommonV1.0.7.tar.gz</span><br><span class="line"># cd libfastcommon-1.0.7</span><br><span class="line"># .&#x2F;make.sh</span><br><span class="line"># .&#x2F;make.sh install</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <strong>libfastcommon</strong>安装好后会自动将库文件拷贝至<strong>/usr/lib64</strong>下，由于FastDFS程序引用<strong>usr/lib</strong>目录,所以需要将<strong>/usr/lib64</strong>下的库文件拷贝至<strong>/usr/lib</strong>下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp &#x2F;usr&#x2F;lib64&#x2F;libfastcommon.so &#x2F;usr&#x2F;lib</span><br><span class="line"># ll &#x2F;usr&#x2F;lib</span><br></pre></td></tr></table></figure><h2 id="4-4-安装FastDFS-tracker-storage"><a href="#4-4-安装FastDFS-tracker-storage" class="headerlink" title="4.4 安装FastDFS(tracker + storage)"></a>4.4 安装FastDFS(tracker + storage)</h2><p>此处我们将tracker和storage配置在一台服务器上，真实环境应该要考虑高可用，需要配置在多台服务器上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;fastdfs</span><br><span class="line"># tar -zxvf FastDFS_v5.05.tar.gz</span><br><span class="line"># cd FastDFS</span><br><span class="line"># .&#x2F;make.sh</span><br><span class="line"># .&#x2F;make.sh install</span><br></pre></td></tr></table></figure><p><strong>安装成功后将安装目录下的conf下的文件拷贝到/etc/fdfs/下。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;FastDFS&#x2F;conf&#x2F;</span><br><span class="line"># cp * &#x2F;etc&#x2F;fdfs&#x2F;</span><br></pre></td></tr></table></figure><h3 id="4-4-1-安装Tracker服务"><a href="#4-4-1-安装Tracker服务" class="headerlink" title="4.4.1 安装Tracker服务"></a>4.4.1 安装Tracker服务</h3><p> 配置tracker服务。修改/etc/fdfs/tracker.conf文件。</p><p><img src="/img/FastDFS/tracker.png" alt=""></p><p>启动tracker：/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</p><p>重启使用命令：/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf <strong>restart</strong></p><h3 id="4-4-2-安装storage服务"><a href="#4-4-2-安装storage服务" class="headerlink" title="4.4.2 安装storage服务"></a>4.4.2 安装storage服务</h3><ol><li><p>如果是在不同的服务器安装，则前面的两步需要重新执行。</p></li><li><p>配置storage服务。修改/etc/fdfs /storage.conf</p></li></ol><p><img src="/img/FastDFS/storage_1.png" alt=""></p><p><img src="/img/FastDFS/storage_2.png" alt=""></p><p>启动storage：/usr/bin/fdfs_storaged  /etc/fdfs/storage.conf </p><p>重启storage：/usr/bin/fdfs_storaged  /etc/fdfs/storage.conf <strong>restart</strong></p><h1 id="5-配置客户端"><a href="#5-配置客户端" class="headerlink" title="5. 配置客户端"></a>5. 配置客户端</h1><p>分三步走：</p><ol><li>将/usr/local/FastDFS/client目录下的libfdfsclient.so文件拷贝到/usr/lib/目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;FastDFS&#x2F;client</span><br><span class="line"># cp libfdfsclient.so &#x2F;usr&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改配置文件/etc/fdfs/client.conf</li></ol><p><img src="/img/FastDFS/client.png" alt=""></p><ol start="3"><li>测试</li></ol><p>在/root/目录下新建hi.html文件，编辑</p><p><img src="/img/FastDFS/hi.html.png" alt=""></p><p>启动tracker和storage，并用客户端上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;bin&#x2F;fdfs_trackerd &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf</span><br><span class="line"># &#x2F;usr&#x2F;bin&#x2F;fdfs_storaged &#x2F;etc&#x2F;fdfs&#x2F;storage.conf</span><br><span class="line"># &#x2F;usr&#x2F;bin&#x2F;fdfs_test &#x2F;etc&#x2F;fdfs&#x2F;client.conf upload &#x2F;root&#x2F;hi.html</span><br></pre></td></tr></table></figure><p><img src="/img/FastDFS/test.png" alt=""></p><p>然后复制url地址即可访问：</p><p><img src="/img/FastDFS/view.png" alt=""></p><p><strong>注意：第一次访问是访问不到的，从URL地址观察会发现访问的其实就是80默认端口，所以需要让虚拟机的防火墙对80端口开放。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># firewall-cmd --add--service&#x3D;http --permaent</span><br><span class="line"># firewall-cmd --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line"># firewall-cmd --list-all</span><br></pre></td></tr></table></figure><p><img src="/img/FastDFS/port.png" alt=""></p><p>但是开放80端口之后，会发现其实还是访问不到的，因为客户端访问FastDFS会存在一个ftp协议，而url地址使用的是http协议，所以需要配置Nginx和Nginx插件，让客户端去访问Nginx，而Nginx找Nginx插件，Nginx插件去访问FastDFS。这样才能达到预期效果。</p><p><img src="/img/FastDFS/http.png" alt=""></p><h1 id="6-安装Nginx和Nginx插件"><a href="#6-安装Nginx和Nginx插件" class="headerlink" title="6. 安装Nginx和Nginx插件"></a>6. 安装Nginx和Nginx插件</h1><p>Nginx需要依赖一些环境（gcc在前面已经安装，所以这里不用再次安装）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install gcc-c++</span><br><span class="line"># yum -y install pcre pcre-devel</span><br><span class="line"># yum -y install zlib zlib-devel</span><br><span class="line"># yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p><strong>安装Nginx和Nginx插件，两者结合</strong></p><ol><li>解压插件压缩包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf fastdfs-nginx-module_v1.16.tar.gz</span><br></pre></td></tr></table></figure><ol start="2"><li>修改fastdfs_nginx_module/src/config文件，把其中的local去掉。</li></ol><p><img src="/img/FastDFS/config.png" alt=""></p><ol start="3"><li>把fastdfs-nginx-module/src/mod_fastdfs.conf文件复制到/etc/fdfs目录下。并编辑该文件：</li></ol><p><img src="/img/FastDFS/mod.png" alt=""></p><ol start="4"><li>解压Nginx，进入其目录。</li><li>给Nginx添加插件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#.&#x2F;configure --add-module&#x3D;&#x2F;usr&#x2F;local&#x2F;soft&#x2F;fastdfs-nginx-module&#x2F;src</span><br></pre></td></tr></table></figure><ol start="6"><li>make </li><li>make install</li></ol><p><strong>注意：Nginx默认安装路径是/usr/local/nginx目录下，所以进入此目录中</strong></p><ol start="8"><li>Nginx的配置  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</span><br></pre></td></tr></table></figure><p>在nginx的配置文件中添加一个location：</p><p><img src="/img/FastDFS/nginx.png" alt=""></p><ol start="9"><li>启动nginx</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br><span class="line"># .&#x2F;nginx</span><br><span class="line"># ps -ef | gerep nginx</span><br></pre></td></tr></table></figure><p><img src="/img/FastDFS/ps.png" alt=""></p><h1 id="7-测试上传访问"><a href="#7-测试上传访问" class="headerlink" title="7. 测试上传访问"></a>7. 测试上传访问</h1><p>将一张图片拖入/root目录：</p><p><img src="/img/FastDFS/in.png" alt=""></p><p>开启tracker和storage，并上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;bin&#x2F;fdfs_trackerd &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf</span><br><span class="line"># &#x2F;usr&#x2F;bin&#x2F;fdfs_storaged &#x2F;etc&#x2F;fdfs&#x2F;storage.conf</span><br><span class="line"># &#x2F;usr&#x2F;bin&#x2F;fdfs_test &#x2F;etc&#x2F;fdfs&#x2F;client.conf upload &#x2F;root&#x2F;3301.jfif</span><br></pre></td></tr></table></figure><p><img src="/img/FastDFS/ok.png" alt=""></p><p>尝试访问：</p><p><img src="/img/FastDFS/success.png" alt=""></p><p>成功！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="FastDFS" scheme="https://xiaozeng26.github.io/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo的入门案例</title>
    <link href="https://xiaozeng26.github.io/2020/05/25/Dubbo%E7%9A%84%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://xiaozeng26.github.io/2020/05/25/Dubbo%E7%9A%84%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</id>
    <published>2020-05-25T07:09:36.000Z</published>
    <updated>2020-05-25T14:32:34.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Dubbo的简介"><a href="#1-Dubbo的简介" class="headerlink" title="1. Dubbo的简介"></a>1. Dubbo的简介</h1><p>Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p><p><strong>什么是RPC ?</strong></p><p>RPC【Remote Procedure Call】是指<strong>远程过程调用</strong>，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p><strong>RPC基本原理</strong></p><p><img src="/img/Dubbo/RPC.png" alt=""></p><p><img src="/img/Dubbo/clientStub.png" alt=""></p><p>根据以上的架构图，做一下解释 : </p><p><strong>客户端消费者的一个功能想要去调用服务端提供者的一个功能时，client functions会去找到一个小助手client stub,而这个小助手会跟服务器建立一个sockets连接，然后将需要调用服务器的方法或者参数传给服务器，服务器端的server stub小助手就会收到这些信息，就会知道客户端要调用服务端的哪个方法以及需要的参数信息也会通过网络传输进服务器端。服务端的小助手就会帮调用需求的方法，获取返回值后通过网络传输给小助手，小助手交给客户端的功能代码。</strong></p><p>总结 ：其实RPC核心就是两个A、B服务器之间建立连接，并进行通信。</p><p>Dubbo官网地址 : <a href="http://dubbo.apache.org/en-us/" target="_blank" rel="noopener">http://dubbo.apache.org/en-us/</a></p><p>Dubbo提供了三大核心能力 : <strong>面向接口的远程方法调用，智能容错和负载均衡，</strong>以及<strong>服务自动注册和发现。</strong></p><h1 id="2-Dubbo的架构说明"><a href="#2-Dubbo的架构说明" class="headerlink" title="2.Dubbo的架构说明"></a>2.Dubbo的架构说明</h1><p>架构图 :</p><p><img src="/img/Dubbo/DubboArchitecture.png" alt=""></p><p><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者（Consumer）</strong>:  调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务。服务消费者，从服务提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心（Registry）</strong>:  注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p><strong>监控中心（Monitor）</strong>:  服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><p>调用关系说明 ： </p><ul><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><h1 id="3-Dubbo的Hello-World"><a href="#3-Dubbo的Hello-World" class="headerlink" title="3. Dubbo的Hello World"></a>3. Dubbo的Hello World</h1><p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。现在要创建两个应用，一个作为服务的提供者，一个作为服务的消费者。通过Dubbo来实现服务消费者远程调用服务提供者的方法。</p><p>需要创建两个服务模块进行测试 ： </p><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>订单服务web模块</td><td>创建订单等</td></tr><tr><td>用户服务service模块</td><td>查询用户地址等</td></tr></tbody></table><p>测试预期结果： </p><p>​        订单服务模块在A服务器，用户服务模块在B服务器，当订单模块需要下订单时，会生成用户地址信息，达到A可以远程调用B的功能。</p><p>项目目录结构图 ： </p><p><img src="/img/Dubbo/HelloWorld.png" alt=""></p><p><strong>注意：</strong>看上面的目录结构图中并没有实体类与接口，那是因为已经将其抽取出来做成一个Module，只需要通过Maven去install成jar,然后通过导入依赖的形式写入module即可。</p><p><img src="/img/Dubbo/api.png" alt=""></p><p><img src="/img/Dubbo/install.png" alt=""></p><p>然后每一个模块都加入相关依赖即可，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.self&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;<span class="class"><span class="keyword">interface</span>-<span class="title">api</span>&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">version</span>&gt;1.0-<span class="title">SNAPSHOT</span>&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-1-公共代码块"><a href="#3-1-公共代码块" class="headerlink" title="3.1 公共代码块"></a><strong>3.1 公共代码块</strong></h2><p>创建一个空的工程，然后<strong>将src目录删除,</strong>在新建一个Module ：interface-api , </p><p>实体类 ： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.dubbo.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;  <span class="comment">//用户地址</span></span><br><span class="line">    <span class="keyword">private</span> String userId; <span class="comment">//用于ID</span></span><br><span class="line">    <span class="keyword">private</span> String consignee; <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNum; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String isDefault; <span class="comment">//是否为默认地址  Y-是  N-否</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAddress</span><span class="params">(Integer id, String userAddress, String userId, String consignee, String phoneNum, String isDefault)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.consignee = consignee;</span><br><span class="line">        <span class="keyword">this</span>.phoneNum = phoneNum;</span><br><span class="line">        <span class="keyword">this</span>.isDefault = isDefault;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAddress</span><span class="params">(String userAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConsignee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> consignee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConsignee</span><span class="params">(String consignee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.consignee = consignee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhoneNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phoneNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneNum</span><span class="params">(String phoneNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phoneNum = phoneNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIsDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isDefault;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsDefault</span><span class="params">(String isDefault)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isDefault = isDefault;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserAddress&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", userAddress='"</span> + userAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", userId='"</span> + userId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", consignee='"</span> + consignee + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phoneNum='"</span> + phoneNum + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", isDefault='"</span> + isDefault + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口 ： </p><p>订单 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.dubbo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID初始化订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initOrder</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户 ： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.dubbo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.dubbo.bean.UserAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID获取所有收货地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-服务提供者"><a href="#3-2-服务提供者" class="headerlink" title="3.2 服务提供者"></a>3.2 服务提供者</h2><p>第一步： 再新建一个Module ： user-service-provider，在pom.xml文件中导入坐标 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 导入Dubbo依赖 --&gt;</span><br><span class="line">      &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.6.2&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">     &lt;!-- 注册中心使用的是Zookeeper，引入Zookeeper客户端 --&gt;</span><br><span class="line">      &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.self&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;<span class="class"><span class="keyword">interface</span>-<span class="title">api</span>&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="class">          &lt;<span class="title">version</span>&gt;1.0-<span class="title">SNAPSHOT</span>&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步 ： 编写用户接口UserService的实现类 ： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.dubbo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.dubbo.bean.UserAddress;</span><br><span class="line"><span class="keyword">import</span> com.self.dubbo.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UserAddress address1 = <span class="keyword">new</span> UserAddress(<span class="number">1</span>,<span class="string">"广西省防城港"</span>,<span class="string">"1"</span>,<span class="string">"张三"</span>,<span class="string">"123456"</span>,<span class="string">"Y"</span>);</span><br><span class="line">        UserAddress address2 = <span class="keyword">new</span> UserAddress(<span class="number">2</span>,<span class="string">"广西省桂林市"</span>,<span class="string">"1"</span>,<span class="string">"李四"</span>,<span class="string">"456789"</span>,<span class="string">"Y"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(address1,address2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步： 编写Spring与Dubbo整合的provider.xml配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:dubbo=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span><br><span class="line">       xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="line"><span class="string">                http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">1</span>.指定当前服务/应用的名称 --&gt;</span><br><span class="line">    &lt;dubbo:application name="user-service-provider"&gt;&lt;/dubbo:application&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">2</span>.指定注册中心的位置 --&gt;</span><br><span class="line">    &lt;dubbo:registry address="zookeeper://127.0.0.1:2181"&gt;&lt;/dubbo:registry&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">3</span>.指定服务消费者与服务提供者的通信规则(通信协议？通信端口) --&gt;</span><br><span class="line">    &lt;dubbo:protocol name="dubbo" port="20880"&gt;&lt;/dubbo:protocol&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">4</span>.暴露服务(暴露的接口全类名，接口的真正实现对象用ref指定) --&gt;</span><br><span class="line">    &lt;dubbo:service interface="com.self.dubbo.service.UserService" ref="userService"&gt;&lt;/dubbo:service&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">5</span>.服务的真正实现对象 --&gt;</span><br><span class="line">    &lt;bean id="userService" class="com.self.dubbo.service.impl.UserServiceImpl"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>第四步 ： 编写启动服务提供者的Main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.dubbo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ioc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"provider.xml"</span>);</span><br><span class="line">        ioc.start();</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行Main方法后，打开dubbo-admin管理控制台就会发现服务提供者已经注册进Zookeeper</p><p><img src="/img/Dubbo/provider1.png" alt=""></p><p><img src="/img/Dubbo/provider2.png" alt=""></p><h2 id="3-3-服务消费者"><a href="#3-3-服务消费者" class="headerlink" title="3.3 服务消费者"></a>3.3 服务消费者</h2><p>第一步： 再新建一个Module ：order-service-consumer ，在pom.xml文件中导入坐标 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 导入Dubbo依赖 --&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 注册中心使用的是Zookeeper，引入Zookeeper客户端 --&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.self&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;<span class="class"><span class="keyword">interface</span>-<span class="title">api</span>&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">version</span>&gt;1.0-<span class="title">SNAPSHOT</span>&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步 :  编写订单接口OrderService的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.dubbo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.dubbo.bean.UserAddress;</span><br><span class="line"><span class="keyword">import</span> com.self.dubbo.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> com.self.dubbo.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Dubbo实现RPC的步骤 :</span></span><br><span class="line"><span class="comment"> *      1. 将服务提供者注册到服务注册中心（暴露服务）</span></span><br><span class="line"><span class="comment"> *          1). 导入Dubbo依赖(2.6.2),操作Zookeeper的客户端(curator)</span></span><br><span class="line"><span class="comment"> *          2). 配置服务提供者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      2. 让服务消费者去注册中心订阅服务提供者的服务地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"orderService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"用户ID : "</span> + userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (UserAddress address : addressList) &#123;</span><br><span class="line">            System.out.println(address.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步： 编写Spring与Dubbo整合的consumer.xml配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:dubbo=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span><br><span class="line">       xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">       http://dubbo.apache.org/schema/dubbo</span></span><br><span class="line"><span class="string">       http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package="com.self.dubbo.service.impl"&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">1</span>. 指定当前应用的名称 --&gt;</span><br><span class="line">    &lt;dubbo:application name="order-service-consumer"&gt;&lt;/dubbo:application&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">2</span>.指定注册中心的位置 --&gt;</span><br><span class="line">    &lt;dubbo:registry address="zookeeper://127.0.0.1:2181"&gt;&lt;/dubbo:registry&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">3</span>. 声明需要调用的远程服务接口，生成远程服务代理 --&gt;</span><br><span class="line">    &lt;dubbo:reference id="userService" interface="com.self.dubbo.service.UserService" &gt;&lt;/dubbo:reference&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>第四步 ： 编写启动服务消费者的Main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.dubbo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.self.dubbo.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ioc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"consumer.xml"</span>);</span><br><span class="line"></span><br><span class="line">        OrderService orderService = ioc.getBean(<span class="string">"orderService"</span>, OrderService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        orderService.initOrder(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用完成..."</span>);</span><br><span class="line">        System.in.read();<span class="comment">//阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行Main方法后，就会发现idea控制台有输出结果，说明订单模块已经成功调用用户模块：</p><p> <img src="/img/Dubbo/consumer.png" alt=""></p><p>打开dubbo-admin管理控制台 ： </p><p><img src="/img/Dubbo/admin1.png" alt=""></p><p><img src="/img/Dubbo/admin2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Dubbo" scheme="https://xiaozeng26.github.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo-admin的管理控制台的搭建</title>
    <link href="https://xiaozeng26.github.io/2020/05/24/Dubbo-admin%E7%9A%84%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://xiaozeng26.github.io/2020/05/24/Dubbo-admin%E7%9A%84%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2020-05-24T14:55:29.000Z</published>
    <updated>2020-05-24T15:43:07.276Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里介绍的dubbo-admin管理控制台的搭建首先要装有Zookeeper，Maven。Zookeeper的安装可以看我发布的“Zookeeper的下载与安装”，觉得还是挺详细的了，而Maven这里不做过多的伸展说明。</p><h1 id="1-下载dubbo-admin"><a href="#1-下载dubbo-admin" class="headerlink" title="1. 下载dubbo-admin"></a>1. 下载dubbo-admin</h1><p>下载地址: <a href="https://github.com/apache/dubbo-admin/tree/master" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin/tree/master</a></p><p><img src="/img/Dubbo/clone.png" alt=""></p><p>解压文件夹到无中文的目录下</p><p><img src="/img/Dubbo/ok.png" alt=""></p><p>进入dubbo-admin会发现这是一个Maven的目录结构，然后找到resources目录下的application.properties进行修改 : </p><p><img src="/img/Dubbo/resources.png" alt=""></p><p><img src="/img/Dubbo/register.png" alt=""></p><p>修改完成后我们需要将项目打成jar包,在项目根目录下执行cmd,</p><p>执行打包命令 :  mvn clean package</p><p><img src="/img/Dubbo/package.png" alt=""></p><p>这样打包会比较慢，请耐心等待~</p><p><img src="/img/Dubbo/success.png" alt=""></p><p>这里就打包成功了，然后我们找到target目录下就会看到打好的jar包</p><p><img src="/img/Dubbo/jar.png" alt=""></p><h1 id="2-运行jar包并进入管理控制台"><a href="#2-运行jar包并进入管理控制台" class="headerlink" title="2. 运行jar包并进入管理控制台"></a>2. 运行jar包并进入管理控制台</h1><p><strong>注意：</strong>在运行jar包之前需要先启动Zookeeper服务，不然dubbo-admin会因为找不到zookeeper管理中心而报错。</p><p><img src="/img/Dubbo/start.png" alt=""></p><p>直接在目录的地址栏中执行cmd命令，进入cmd窗口后执行对应的启动命令即可。</p><p><img src="/img/Dubbo/zkServer.png" alt=""></p><p><img src="/img/Dubbo/zkCli.png" alt=""></p><p>然后在dubbo-admin-0.0.1-SNAPSHOT.jar的根目录下，使用cmd命令行执行: <strong>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</strong>  ，运行项目。</p><p><img src="/img/Dubbo/java-jar.png" alt=""></p><p>会发现服务已经在默认端口7001启动 : </p><p><img src="/img/Dubbo/7001.png" alt=""></p><p>我们可以在网页访问一下控制台：<br>访问地址就是：<strong><a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a></strong><br>默认的用户名和密码都是 ：<strong>root</strong></p><p><img src="/img/Dubbo/in.png" alt=""></p><p><img src="/img/Dubbo/page.png" alt=""></p><p>现在就登录成功了！</p><p>到此为止，dubbo-admin管理控制台的搭建就完成了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Dubbo" scheme="https://xiaozeng26.github.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper的下载与安装</title>
    <link href="https://xiaozeng26.github.io/2020/05/24/Zookeeper%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>https://xiaozeng26.github.io/2020/05/24/Zookeeper%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
    <published>2020-05-24T02:21:48.000Z</published>
    <updated>2020-05-24T04:20:33.896Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>​            Zookeeper是一个开源的分布式的项目，用于管理服务提供者的注册信息。</p><p>​            Zookeeper = 文件系统 + 通知机制</p><h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h1><ul><li>Zookeeper : 一个领导者(Leader),多个跟随者(Follower)组成的集群。</li><li><strong>集群中只有半数以上节点存活，Zookeeper集群才能正常服务。</strong></li><li>全局数据一致 : 每个Server保存一份相同的数据副本，Client无论连接到哪一个Server，数据都是一致的。</li><li>更新请求和顺序执行 : 来自同一个Client的更新请求按其发送顺序依次执行。</li><li>数据更新原子性 :  一次数据更新要么成功，要么失败。</li><li>实时性 : 在一定时间范围内，Client能读到最新数据。</li></ul><h1 id="3-Zookeeper的数据结构"><a href="#3-Zookeeper的数据结构" class="headerlink" title="3. Zookeeper的数据结构"></a>3. Zookeeper的数据结构</h1><p>​                Zookeeper数据模型，整体上可以看作是一棵树，每个节点称作一个ZNode，每一个ZNode默认能够存储<strong>1MB</strong>的数据，<strong>每个ZNode都可以通过其路径唯一标识。</strong></p><p><img src="/img/Zookeeper/mode.png" alt=""></p><h1 id="4-基于Windows的Zookeeper安装"><a href="#4-基于Windows的Zookeeper安装" class="headerlink" title="4. 基于Windows的Zookeeper安装"></a>4. 基于Windows的Zookeeper安装</h1><p>1.下载地址 : <a href="https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz</a></p><p>2.将下载下来的.tar.gz解压到不含中文的目录，并进入Zookeeper根目录下的bin目录。</p><p><img src="/img/Zookeeper/bin.png" alt=""></p><p>3.在bin目录下的地址栏输入cmd,进入命令行窗口并执行zkServer.cmd</p><p><img src="/img/Zookeeper/zoo.png" alt=""></p><p>如果报了以上的错误，说明需要在conf目录下做修改 ：</p><p><img src="/img/Zookeeper/conf.png" alt=""></p><p>将文件夹下的zoo_sample.cfg文件复制一份副本，并更名为zoo.cfg。</p><p>编辑zoo.cfg,更改dataDir参数，并在Zookeeper目录下创建data目录 ： </p><p><img src="/img/Zookeeper/vimZoo.png" alt=""></p><p><img src="/img/Zookeeper/data.png" alt=""></p><p>4.然后重新进入bin目录启动Zookeeper服务器，并用客户端连接 : </p><p><img src="/img/Zookeeper/start.png" alt=""></p><p>启动Server时出现Zookeeper的图标，说明启动成功。</p><p><img src="/img/Zookeeper/conn.png" alt=""></p><p>客户端连接成功</p><h1 id="5-基于Linux的Zookeeper安装"><a href="#5-基于Linux的Zookeeper安装" class="headerlink" title="5.基于Linux的Zookeeper安装"></a>5.基于Linux的Zookeeper安装</h1><p>*<em>注意: *</em> 安装Zookeeper之前先要安装jdk</p><p>1.在/opt目录下新建software,和module目录，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;opt&#x2F;software</span><br><span class="line"># mkdir &#x2F;opt&#x2F;module</span><br></pre></td></tr></table></figure><p>2.按住alt + p进入文件传输窗口，将Zookeeper和jdk的.tar.gz拖进/opt/software/</p><p>3.将/opt/software中的Zookeeper包解压到/opt/module目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf jdk-8u144-linux-x64.tar.gz -C &#x2F;opt&#x2F;module&#x2F;</span><br></pre></td></tr></table></figure><p>4.配置环境变量</p><p>进入jdk目录，用pwd命令获取其路径，然后编辑/etc/profile</p><p>在profile文件底部加入以下内容: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##JAVA_HOME</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;jdk1.8.0_144</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><p>记住，写入之后需要先编译以下才能生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># java -version</span><br></pre></td></tr></table></figure><p><img src="/img/Zookeeper/java.png" alt=""></p><p>出现以上信息代表安装成功</p><p>5.解压Zookeeper软件包到/opt/module目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf apache-zookeeper-3.6.1-bin.tar.gz -C &#x2F;opt&#x2F;module&#x2F;</span><br></pre></td></tr></table></figure><p>6.修改配置</p><p>将/opt/module/apache-zookeeper-3.6.1-bin/conf路径下的zoo_sample.cfg更名为zoo.cfg;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>打开zoo.cfg文件，修改dataDir路径 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim zoo.cfg</span><br></pre></td></tr></table></figure><p>​        修改如下内容 :</p><p>​            dataDir=/opt/module/apache-zookeeper-3.6.1-bin/zkData</p><p>在/opt/module/apache-zookeeper-3.6.1-bin/目录下创建zkData文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir zkData</span><br></pre></td></tr></table></figure><p>7.启动Linux版的Zookeeper服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># bin&#x2F;zkServer.sh start</span><br><span class="line"># ps -ef | grep zookeeper</span><br></pre></td></tr></table></figure><p><img src="/img/Zookeeper/zoo_linux.png" alt=""></p><p>用客户端连接Zookeeper服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bin&#x2F;zkCli.sh</span><br></pre></td></tr></table></figure><p><img src="/img/Zookeeper/cli_linux.png" alt=""></p><p>到达此步骤表示已经全部安装完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Zookeeper" scheme="https://xiaozeng26.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化</title>
    <link href="https://xiaozeng26.github.io/2020/05/23/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://xiaozeng26.github.io/2020/05/23/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2020-05-23T01:40:54.000Z</published>
    <updated>2020-05-23T14:07:12.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Redis持久化有两种方式 : </p><ul><li>数据快照(RDB)</li><li>过程日志(AOF)</li></ul><h1 id="1-数据快照-RDB"><a href="#1-数据快照-RDB" class="headerlink" title="1. 数据快照(RDB)"></a>1. 数据快照(RDB)</h1><p>定义 : 将当前数据状态进行保存，快照形式，存储的是数据结果，存储格式简单，关注点在数据。</p><p>RDB启动方式有三种 :</p><ul><li>save指令</li><li>bgsave指令</li><li>save配置 </li></ul><h2 id="1-1-RDB启动方式–save指令"><a href="#1-1-RDB启动方式–save指令" class="headerlink" title="1.1 RDB启动方式–save指令"></a>1.1 RDB启动方式–save指令</h2><p>下面进行实操演示 : </p><p>开启Redis服务器后，使用客户端连接，</p><p><img src="/img/Redis/cli_start.png" alt=""></p><p>使用了<strong>save</strong>命令之后，会在data目录下生成dump.rdb文件 : </p><p><img src="/img/Redis/rdb.png" alt=""></p><ul><li>命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure><ul><li><p>作用</p><p>​    手动执行一次保存操作</p></li></ul><h3 id="1-1-1-save指令相关配置"><a href="#1-1-1-save指令相关配置" class="headerlink" title="1.1.1 save指令相关配置"></a>1.1.1 save指令相关配置</h3><ul><li><p>dbfilename dump.rdb</p><p>​    说明 : 设置本地数据库文件名，默认为dump.rdb , 通常设置为dump-<strong>端口号</strong>.rdb</p></li><li><p>dir</p><p>​    说明: 设置存储.rdb文件的路径，例如redis根目录下的data</p></li><li><p>rdbcompression yes</p><p>​    说明 : 设置存储至本地数据库时是否压缩数据，默认为yes</p></li><li><p>rdbchecksum yes</p><p>​    说明 : 设置是否进行RDB文件格式校验，该校验过程在写文件或读文件过程中均执行。</p></li></ul><p>修改conf目录下的redis-6379.conf,添加参数 : </p><p><img src="/img/Redis/rdbFile.png" alt=""></p><p><strong>注意：</strong> 修改完配置文件后需要重启Redis服务才能生效。</p><p><img src="/img/Redis/restart.png" alt=""></p><p>然后，再次启动客户端执行save指令就会发现重新生成了dump-6379.rdb文件</p><p><img src="/img/Redis/reCli.png" alt=""></p><p><img src="/img/Redis/6379rdb.png" alt=""></p><p>所以，在执行save指令之后，就可以实现保存数据，重启一下Redis服务之后，之前的数据依旧会存在。</p><p><img src="/img/Redis/restartRedisServer.png" alt=""></p><p><img src="/img/Redis/inCli.png" alt=""></p><p>从以上图示可以看出，数据还是存在的。</p><p><strong>注意:</strong>save指令的执行有可能会阻塞当前Redis服务器，直到当前RDB过程完成为止，就有可能会造成长时间阻塞，<strong>线上环境不建议使用</strong>。</p><h2 id="1-2-RDB启动方式–bgsave指令"><a href="#1-2-RDB启动方式–bgsave指令" class="headerlink" title="1.2 RDB启动方式–bgsave指令"></a>1.2 RDB启动方式–bgsave指令</h2><ul><li>命令 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgsave</span><br></pre></td></tr></table></figure><ul><li><p>作用</p><p>​    手动启动后台保存操作，但不是立即执行</p></li></ul><h3 id="1-2-1-bgsave指令相关配置"><a href="#1-2-1-bgsave指令相关配置" class="headerlink" title="1.2.1 bgsave指令相关配置"></a>1.2.1 bgsave指令相关配置</h3><p>在前面的配置基础上，加一条参数即可，</p><ul><li><p>stop-writes-on-bgsave-error yes</p><p>​    说明 : 后台存储过程中如果出现错误时，是否停止保存操作</p></li></ul><h2 id="1-3-RDB启动方式–save配置"><a href="#1-3-RDB启动方式–save配置" class="headerlink" title="1.3 RDB启动方式–save配置"></a>1.3 RDB启动方式–save配置</h2><ul><li>配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save second changes</span><br></pre></td></tr></table></figure><ul><li><p>作用 </p><p>​    满足限定时间范围内key的变化数量达到指定数量即进行自动持久化</p></li><li><p>参数 </p><p>​    second : 限定时间范围</p><p>​    changes : 监控key的变化量</p></li><li><p>位置 </p><p>​    在conf文件中进行配置</p></li><li><p>例子</p><p>​    save  900  1</p><p>​    save   300  10</p></li></ul><p>**</p><h2 id="1-4-RDB三种启动方式的比较"><a href="#1-4-RDB三种启动方式的比较" class="headerlink" title="1.4 RDB三种启动方式的比较"></a>1.4 RDB三种启动方式的比较</h2><table><thead><tr><th align="center">方式</th><th align="center">save指令</th><th align="center">bgsave指令</th></tr></thead><tbody><tr><td align="center">读写</td><td align="center">同步</td><td align="center">异步</td></tr><tr><td align="center">阻塞客户端指令</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">额外内存消耗</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">启动新进程</td><td align="center">否</td><td align="center">是</td></tr></tbody></table><p><strong>注意 :  save配置在后台执行的还是bgsave操作,所以比较上就不列出来了。</strong></p><h2 id="1-5-RDB的优点与缺点"><a href="#1-5-RDB的优点与缺点" class="headerlink" title="1.5 RDB的优点与缺点"></a>1.5 RDB的优点与缺点</h2><p><strong>RDB优点</strong></p><ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高。</li><li>RDB恢复数据的速度比AOF快很多。</li></ul><p><strong>RDB缺点</strong></p><ul><li>无法做到实时持久化，丢失数据可能性较大。</li><li>bgsave指令的执行要进行fork操作创建子进程，性能会被消耗。</li></ul><h1 id="2-过程日志-AOF"><a href="#2-过程日志-AOF" class="headerlink" title="2. 过程日志(AOF)"></a>2. 过程日志(AOF)</h1><p>概念: 将数据的操作过程进行保存，日志形式，存储的是操作过程，存储格式复杂，关注点在数据的操作过程。</p><ul><li>AOF的主要作用是解决了数据持久化的实时性。</li></ul><h2 id="2-1-AOF写数据三种策略-appendfsync"><a href="#2-1-AOF写数据三种策略-appendfsync" class="headerlink" title="2.1 AOF写数据三种策略(appendfsync)"></a>2.1 AOF写数据三种策略(appendfsync)</h2><ul><li><p>always（每次）</p><p>​    每次写入操作均同步到AOF文件中，<strong>数据零误差,但性能较低</strong>，不建议使用。</p></li><li><p>everysec (每秒)</p><p>​    每秒将缓冲区中的指令同步到AOF文件中，<strong>数据准确性较高，性能较高</strong>，建议使用，也是默认配置。</p></li><li><p>no (系统控制)</p><p>​    由系统进行控制，整体过程<strong>不可控</strong>。</p></li></ul><h2 id="2-2-AOF功能开启"><a href="#2-2-AOF功能开启" class="headerlink" title="2.2 AOF功能开启"></a>2.2 AOF功能开启</h2><ul><li>配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes|no</span><br></pre></td></tr></table></figure><ul><li><p>作用</p><p>​    是否开启AOF持久化功能</p></li><li><p>配置</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always|everysec|no</span><br></pre></td></tr></table></figure><ul><li><p>作用</p><p>​    AOF写数据策略(从缓存中将数据写入aof文件)</p></li></ul><h2 id="2-3-AOF相关配置"><a href="#2-3-AOF相关配置" class="headerlink" title="2.3 AOF相关配置"></a>2.3 AOF相关配置</h2><ul><li>配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfilename filename</span><br></pre></td></tr></table></figure><ul><li><p>作用</p><p>​    AOF持久化文件名，默认文件名是appendonly.aof,建议配置为appendonly-端口号.aof</p></li><li><p>配置</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure><ul><li><p>作用</p><p>​    AOF持久化文件保存的路径，与RDB持久化文件保存一致即可。</p></li></ul><h2 id="2-4-AOF重写"><a href="#2-4-AOF重写" class="headerlink" title="2.4 AOF重写"></a>2.4 AOF重写</h2><p>当命令不断的写入AOF文件中，文件就会越来越来大，AOF文件重写就能解决这个问题。</p><p>AOF文件重写 : 将对同一个数据的若干条指令执行结果转化成最终结果数据对应的指令进行记录。</p><h3 id="2-4-1-AOF重写方式"><a href="#2-4-1-AOF重写方式" class="headerlink" title="2.4.1 AOF重写方式"></a>2.4.1 AOF重写方式</h3><ul><li>手动重写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure><ul><li>自动重写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size</span><br><span class="line">auto-aof-rewrite-percentage percentage</span><br></pre></td></tr></table></figure><p><strong>AOF自动重写方式</strong></p><ul><li>自动重写触发条件设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size</span><br><span class="line">auto-aof-rewrite-percentage percent</span><br></pre></td></tr></table></figure><ul><li>自动重写触发的对比参数( 运行指令info Persistence获取具体信息)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aof_current_size</span><br><span class="line">aof_base_size</span><br></pre></td></tr></table></figure><ul><li>自动重写触发条件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aof_current_size &gt; auto_aof-rewrite-min-size</span><br><span class="line">(aof_current_size - aof_base_size)&#x2F;aof_base_size &gt;&#x3D; auto-aof-rewrite-percentage</span><br></pre></td></tr></table></figure><h1 id="3-RDB与AOF的区别"><a href="#3-RDB与AOF的区别" class="headerlink" title="3. RDB与AOF的区别"></a>3. RDB与AOF的区别</h1><table><thead><tr><th align="center">持久化方式</th><th align="center">RDB</th><th align="center">AOF</th></tr></thead><tbody><tr><td align="center">占用存储空间</td><td align="center">小(数据级 ： 压缩)</td><td align="center">大(指令集 : 重写)</td></tr><tr><td align="center">存储速度</td><td align="center">慢</td><td align="center">快</td></tr><tr><td align="center">恢复速度</td><td align="center">快</td><td align="center">慢</td></tr><tr><td align="center">数据安全性</td><td align="center">会丢失数据</td><td align="center">依据策略决定</td></tr><tr><td align="center">资源消耗</td><td align="center">高/重量级</td><td align="center">低/轻量级</td></tr><tr><td align="center">启动优先级</td><td align="center">低</td><td align="center">高</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://xiaozeng26.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>基于Linux的Redis安装与启动</title>
    <link href="https://xiaozeng26.github.io/2020/05/22/%E5%9F%BA%E4%BA%8ELinux%E7%9A%84Redis%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8/"/>
    <id>https://xiaozeng26.github.io/2020/05/22/%E5%9F%BA%E4%BA%8ELinux%E7%9A%84Redis%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8/</id>
    <published>2020-05-22T04:37:31.000Z</published>
    <updated>2020-05-22T14:07:05.216Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Linux中安装Redis"><a href="#1-Linux中安装Redis" class="headerlink" title="1. Linux中安装Redis"></a>1. Linux中安装Redis</h1><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h2><p>进入Redis官网下载 : <a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h2><p>提示 : 安装redis时，首先要安装gcc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install gcc</span><br><span class="line"># yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>安装步骤 : </p><ul><li>开启Linux，并用SecureCRT连接</li><li>在Linux的/opt目录下创建software、module文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;opt&#x2F;software</span><br><span class="line"># mkdir &#x2F;opt&#x2F;module</span><br></pre></td></tr></table></figure><ul><li>将下载好的.tar.gz拖进Linux，按住alt+p进入文件传输窗口，cd进/opt/software目录，将文件直接拖入Linux即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;software</span><br><span class="line"># pwd</span><br></pre></td></tr></table></figure><ul><li>将.tar.gz解压到/opt/module</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;software</span><br><span class="line"># tar -zxvf redis-6.0.1.tar.gz -C &#x2F;opt&#x2F;module&#x2F;</span><br></pre></td></tr></table></figure><ul><li>进入解压后的redis目录,使用make命令进行编译</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;module&#x2F;redis-6.0.1&#x2F;</span><br><span class="line"># make</span><br></pre></td></tr></table></figure><p>如果报了一下错误，说明gcc版本过低，要求gcc版本是5.3以上(可通过gcc -v查看版本)，需要升级版本再安装 : </p><p><img src="/img/Redis/error.png" alt=""></p><p>执行一下命令进行升级gcc ,升级至9.3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install centos-release-scl</span><br><span class="line"># yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line"># scl enable devtoolset-9 bash</span><br></pre></td></tr></table></figure><p>*<em>需要注意，scl命令启用只是临时的，退出shell或重启就会恢复原系统的gcc版本，如果要长期使用gcc 9.3的话 : *</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;source &#x2F;opt&#x2F;rh&#x2F;devtoolset-9&#x2F;enable&quot; &gt;&gt;&#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>升级之后再次编译即可</p><ul><li>进入src/目录，执行make install后显示以下信息表示安装成功 : </li></ul><p><img src="/img/Redis/install.png" alt=""></p><h1 id="2-Redis服务启动"><a href="#2-Redis服务启动" class="headerlink" title="2.Redis服务启动"></a>2.Redis服务启动</h1><h2 id="2-1-指定端口启动服务"><a href="#2-1-指定端口启动服务" class="headerlink" title="2.1 指定端口启动服务"></a>2.1 指定端口启动服务</h2><p>服务器端 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src]# redis-server --port 6380</span><br></pre></td></tr></table></figure><p>客户端 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src]# redis-cli -p 6380</span><br></pre></td></tr></table></figure><h2 id="2-2-指定配置文件启动服务"><a href="#2-2-指定配置文件启动服务" class="headerlink" title="2.2 指定配置文件启动服务"></a>2.2 指定配置文件启动服务</h2><p>将目录下的redis.conf配置文件简化的复制一份，以后就使用简化的配置文件 :</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat redis.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; &gt; redis-6379.conf</span><br><span class="line"># vim redis-6379.conf</span><br></pre></td></tr></table></figure><p>将redis-6379.conf配置文件只保留核心的一些东西 : </p><p><img src="/img/Redis/conf.png" alt=""></p><ul><li>port  6379    ## 端口号</li><li>daemonize  yes    ##守护进程启动</li><li>logfile  “6379.log”    ## 日志文件</li><li>dir   /opt/module/redis-6.0.1/data    ## 生成文件后存放的目录</li></ul><p>服务器端启动 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-6.0.1]# redis-server redis-6379.conf</span><br></pre></td></tr></table></figure><p>执行命令后redis就在后台启动了，可通过进程命令查看是否已启动redis服务端 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef | grep redis-</span><br></pre></td></tr></table></figure><p><img src="/img/Redis/ps_redis.png" alt=""></p><p>客户端尝试连接 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-cli</span><br></pre></td></tr></table></figure><p><img src="/img/Redis/attempt_conn.png" alt=""></p><h2 id="2-3-配置文件启动目录管理"><a href="#2-3-配置文件启动目录管理" class="headerlink" title="2.3 配置文件启动目录管理"></a>2.3 配置文件启动目录管理</h2><p>在使用redis-6379.conf配置文件可以启动成功，但是发现，每当需要新启一个redis服务，就新建一个配置文件，这样会导致redis根目录下比较杂乱，所以建议用一个目录进行管理配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-6.0.1]# mkdir conf</span><br><span class="line">redis-6.0.1]# mv redis-6379.conf conf&#x2F;</span><br></pre></td></tr></table></figure><p><img src="/img/Redis/mv.png" alt=""></p><p>服务器端启动 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-server conf&#x2F;redis-6379.con</span><br></pre></td></tr></table></figure><p><img src="/img/Redis/conf_redis.png" alt=""></p><p>客户端启动 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-cli</span><br></pre></td></tr></table></figure><p><strong>之后需要新启一个redis服务时，只需要将redis-6379.conf配置文件复制一份并改名字和内部端口号，日志文件名即可，例如: redis-6380.conf</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://xiaozeng26.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis通用指令</title>
    <link href="https://xiaozeng26.github.io/2020/05/22/Redis%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://xiaozeng26.github.io/2020/05/22/Redis%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4/</id>
    <published>2020-05-22T02:20:56.000Z</published>
    <updated>2020-05-22T02:58:03.626Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Redis通用指令可以分两种 : </p><ul><li>key通用指令</li><li>数据库通用指令</li></ul><h1 id="1-key通用指令"><a href="#1-key通用指令" class="headerlink" title="1.key通用指令"></a>1.key通用指令</h1><h2 id="1-1-key基本操作"><a href="#1-1-key基本操作" class="headerlink" title="1.1 key基本操作"></a>1.1 key基本操作</h2><ul><li>删除指定key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure><ul><li>判断key是否存在</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure><ul><li>获取key的类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure><h2 id="1-2-key扩展操作"><a href="#1-2-key扩展操作" class="headerlink" title="1.2 key扩展操作"></a>1.2 key扩展操作</h2><ul><li>为指定key设置有效期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expire key seconds</span><br><span class="line">pexpire key milliseconds</span><br><span class="line">expireat key timestamp</span><br><span class="line">pexpireat key milliseconds-timestamp</span><br></pre></td></tr></table></figure><ul><li>获取key的有效时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ttl key</span><br><span class="line">pttl key</span><br></pre></td></tr></table></figure><ul><li>将key从时效性转化为永久性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure><ul><li>查询key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys pattern</span><br></pre></td></tr></table></figure><p><strong>查询规则</strong></p><p>？匹配一个任意字符    [] 匹配一个指定字符    * 匹配任意数量的任意字符</p><table><thead><tr><th>pattern</th><th>description</th></tr></thead><tbody><tr><td>keys *</td><td>查询所有</td></tr><tr><td>keys zhang*</td><td>查询所有以zhang开头</td></tr><tr><td>keys *san</td><td>查询所有以san结尾</td></tr><tr><td>keys ?????san</td><td>查询所有前面五个任意字符，后面以san结尾</td></tr><tr><td>keys user: ?</td><td>查询所有以user : 开头，最后一个字符任意</td></tr><tr><td>keys u[st]er : 1</td><td>查询所有以u开头，以er:1结尾，中间包含一个字母，s或t</td></tr></tbody></table><h2 id="1-3-key其他操作"><a href="#1-3-key其他操作" class="headerlink" title="1.3 key其他操作"></a>1.3 key其他操作</h2><ul><li>为key改名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename key newkey</span><br><span class="line">renamenx key newkey</span><br></pre></td></tr></table></figure><ul><li>对所有key排序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort</span><br></pre></td></tr></table></figure><ul><li>其他key通用操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help @generic</span><br></pre></td></tr></table></figure><h1 id="2-数据库通用指令"><a href="#2-数据库通用指令" class="headerlink" title="2.数据库通用指令"></a>2.数据库通用指令</h1><h2 id="2-1-db基本操作"><a href="#2-1-db基本操作" class="headerlink" title="2.1 db基本操作"></a>2.1 db基本操作</h2><ul><li>切换数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select index</span><br></pre></td></tr></table></figure><ul><li>其他操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line">ping </span><br><span class="line">echo message</span><br></pre></td></tr></table></figure><h2 id="2-2-db相关操作"><a href="#2-2-db相关操作" class="headerlink" title="2.2 db相关操作"></a>2.2 db相关操作</h2><ul><li>数据移动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move key db</span><br></pre></td></tr></table></figure><ul><li>数据清除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbsize</span><br><span class="line">flushdb</span><br><span class="line">flushall</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://xiaozeng26.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis的五大数据类型</title>
    <link href="https://xiaozeng26.github.io/2020/05/21/Redis%E7%9A%84%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xiaozeng26.github.io/2020/05/21/Redis%E7%9A%84%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-05-21T02:25:03.000Z</published>
    <updated>2020-05-21T14:41:36.752Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis-的五大数据类型"><a href="#Redis-的五大数据类型" class="headerlink" title="Redis 的五大数据类型"></a>Redis 的五大数据类型</h1><p>Redis一般是不在Windows系统中操作，但是对于零基础的学习者来说，windows版的Redis能上手更快，之后还会出适用于企业级开发的Linux版Redis教程。</p><p>在学习Redis时，首先得在Windows中进行安装。</p><h1 id="1-Redis的Windows版安装使用"><a href="#1-Redis的Windows版安装使用" class="headerlink" title="1. Redis的Windows版安装使用"></a>1. Redis的Windows版安装使用</h1><p>下载地址 ： <a href="https://github.com/MSOpenTech/redis/tags" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/tags</a></p><p>下载解压后可以直接使用</p><p><img src="/img/Redis/download.png" alt=""></p><p>核心文件 : </p><ul><li>redis-server.exe                服务启动命令</li><li>redis-cli.exe                   客户端启动</li><li>redis.windows.conf       redis核心配置文件</li><li>redis-benchmark.exe    性能测试工具</li><li>redis-check-aof.exe       AOF文件修复工具</li><li>redis-check-dump.exe   RDB文件修复工具</li></ul><p>进入Redis的安装目录cmd启动Redis服务器和客户端 : </p><p><img src="/img/Redis/cmd.png" alt=""></p><p>服务端启动 : </p><p><img src="/img/Redis/redis-server.png" alt=""></p><p>端口(Port) : 6379</p><p>PID : 随机产生</p><p>客户端连接: </p><p><img src="/img/Redis/redis-cli.png" alt=""></p><p>在介绍Redis的五大数据类型之前，先要懂得一些基本操作</p><h1 id="2-Redis的基本操作"><a href="#2-Redis的基本操作" class="headerlink" title="2. Redis的基本操作"></a>2. Redis的基本操作</h1><p><strong>信息添加</strong></p><ul><li>功能 : 设置key,value数据</li><li>命令 : </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure><ul><li>例 :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set name zhangsan</span><br></pre></td></tr></table></figure><p><strong>信息查询</strong></p><ul><li>功能 :  根据key查询出对应的value，如果不存在，则返回空(nil)</li><li>命令 : </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure><ul><li>例 : </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure><p><strong>清屏命令</strong></p><ul><li>功能 ：清除屏幕信息</li><li>命令 :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><p><strong>退出客户端命令</strong></p><ul><li>功能 : 退出客户端</li><li>命令 : </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><strong>帮助命令</strong></p><ul><li>获取命令帮助文档，获取组中所有命令信息名称</li><li>命令 : </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">help 命令名称</span><br><span class="line">help @组名</span><br></pre></td></tr></table></figure><h1 id="3-Redis五大数据类型"><a href="#3-Redis五大数据类型" class="headerlink" title="3. Redis五大数据类型"></a>3. Redis五大数据类型</h1><p>Redis的五大数据类型分别是  ： </p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted_set</li></ul><h2 id="3-1-string"><a href="#3-1-string" class="headerlink" title="3.1 string"></a>3.1 string</h2><p>redis数据存储格式</p><ul><li>redis 就相当于一个Map，采用的是<strong>key : value</strong> 的形式存储数据。</li><li><strong>数据类型</strong>指的是存储的数据的类型，也就是value部分的类型，而key永远都是字符串。</li></ul><p><img src="/img/Redis/string.png" alt=""></p><h3 id="3-1-1-string-类型数据的基本操作"><a href="#3-1-1-string-类型数据的基本操作" class="headerlink" title="3.1.1 string 类型数据的基本操作"></a>3.1.1 string 类型数据的基本操作</h3><ul><li>添加/修改数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure><p>或</p><ul><li>添加/修改多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mset key1 value1 key2 value2 ...</span><br></pre></td></tr></table></figure><ul><li>获取多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget key1 key2 ...</span><br></pre></td></tr></table></figure><ul><li>获取字符串长度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure><ul><li>追加信息到原始信息后部(若信息不存在，则新建)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure><h3 id="3-1-2-string-类型数据的拓展操作"><a href="#3-1-2-string-类型数据的拓展操作" class="headerlink" title="3.1.2 string 类型数据的拓展操作"></a>3.1.2 string 类型数据的拓展操作</h3><ul><li>设置数值数据增加指定范围的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">incr key </span><br><span class="line">incrby key increment</span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure><ul><li>设置数值数据减少指定范围的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decr key</span><br><span class="line">decrby key increment</span><br></pre></td></tr></table></figure><ul><li>设置数据具有指定的生命周期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setex key seconds value</span><br><span class="line">psetex key milliseconds value</span><br></pre></td></tr></table></figure><h3 id="3-1-3-string-类型数据操作的注意事项"><a href="#3-1-3-string-类型数据操作的注意事项" class="headerlink" title="3.1.3 string 类型数据操作的注意事项"></a>3.1.3 string 类型数据操作的注意事项</h3><ul><li><p>数据操作不成功的反馈与数据正常操作之间的差异</p><p>① 表示运行结果是否成功</p><ul><li>(integer) 0  —&gt; false    失败</li><li>(integer) 1  —&gt; true     成功</li></ul><p>② 表示运行结果值</p><ul><li>(integer) 3  —&gt; 3     3个</li><li>(integer) 1  —&gt; 1     1个</li></ul></li><li><p>数据没获取到</p><p>​    (nil) ,相当于null</p></li><li><p>数据最大存储量</p><p>​    512MB</p></li></ul><h3 id="3-1-4-Key的设置约定"><a href="#3-1-4-Key的设置约定" class="headerlink" title="3.1.4 Key的设置约定"></a>3.1.4 Key的设置约定</h3><ul><li><p>数据库中的key命名惯例 : </p><p><strong>表名 : 主键名 : 主键值 : 字段名</strong></p></li></ul><p>eg :   order : id : xxxxx : name</p><h2 id="3-2-hash"><a href="#3-2-hash" class="headerlink" title="3.2 hash"></a>3.2 hash</h2><p>存储结构 : 一个存储空间保存多个键值对数据</p><p>hash类型 : 底层使用哈希表结构实现数据存储</p><p>图例 : </p><p><img src="/img/Redis/hash.png" alt=""></p><h3 id="3-2-1-hash类型数据的基本操作"><a href="#3-2-1-hash类型数据的基本操作" class="headerlink" title="3.2.1 hash类型数据的基本操作"></a>3.2.1 hash类型数据的基本操作</h3><ul><li>添加/修改数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset key field value</span><br></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hget key field</span><br><span class="line">hgetall key</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdel key field1 [field2]</span><br></pre></td></tr></table></figure><p>或</p><ul><li>添加/修改多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset key field1 value1 field2 value2 ...</span><br></pre></td></tr></table></figure><ul><li>获取多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmget key field1 field2 ...</span><br></pre></td></tr></table></figure><ul><li>获取哈希表中字段的数量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure><ul><li>判断哈希表中是否存在指定的字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure><h3 id="3-2-2-hash类型数据的拓展操作"><a href="#3-2-2-hash类型数据的拓展操作" class="headerlink" title="3.2.2 hash类型数据的拓展操作"></a>3.2.2 hash类型数据的拓展操作</h3><ul><li>获取哈希表中所有的字段名或字段值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hkeys key</span><br><span class="line">hvals key</span><br></pre></td></tr></table></figure><ul><li>设置指定字段的数值数据增加指定范围的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hincrby key field increment</span><br><span class="line">hincrbyfloat key field increment</span><br></pre></td></tr></table></figure><h2 id="3-3-list"><a href="#3-3-list" class="headerlink" title="3.3 list"></a>3.3 list</h2><p>存储结构 : 一个存储空间保存多个数据，且，通过数据可以体现出进入顺序。</p><p>list类型 : 保存多个数据，底层使用双向链表存储结构实现</p><p><img src="/img/Redis/twoList.png" alt=""></p><p>list数据类型图例 : </p><p><img src="/img/Redis/list.png" alt=""></p><h3 id="3-3-1-list类型数据的基本操作"><a href="#3-3-1-list类型数据的基本操作" class="headerlink" title="3.3.1 list类型数据的基本操作"></a>3.3.1 list类型数据的基本操作</h3><ul><li>添加/修改数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 [value2] ...</span><br><span class="line">rpush key value1 [value2] ...</span><br></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrange key start stop </span><br><span class="line">lindex key index</span><br><span class="line">llen key</span><br></pre></td></tr></table></figure><ul><li>获取并移除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure><h3 id="3-3-2-list类型数据的拓展操作"><a href="#3-3-2-list类型数据的拓展操作" class="headerlink" title="3.3.2 list类型数据的拓展操作"></a>3.3.2 list类型数据的拓展操作</h3><ul><li>规定时间内获取并移除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blpop key1 [key2] timeout</span><br><span class="line">brpop key1 [key2] timeout</span><br><span class="line">brpoplpush source desination timeout</span><br></pre></td></tr></table></figure><ul><li>移除指定数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></table></figure><h2 id="3-4-set"><a href="#3-4-set" class="headerlink" title="3.4 set"></a>3.4 set</h2><p>set类型 : 与hash存储结构完全相同，仅存储键，不存储值(nil),并且值是不允许重复的。</p><p><img src="/img/Redis/set.png" alt=""></p><h3 id="3-4-1-set类型数据的基本操作"><a href="#3-4-1-set类型数据的基本操作" class="headerlink" title="3.4.1 set类型数据的基本操作"></a>3.4.1 set类型数据的基本操作</h3><ul><li>添加数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd key member1 [member2]</span><br></pre></td></tr></table></figure><ul><li>获取全部数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srem key member1 [member2]</span><br></pre></td></tr></table></figure><ul><li>获取集合的数据总量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure><ul><li>判断集合中是否包含指定数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure><h3 id="3-4-2-set类型数据的拓展操作"><a href="#3-4-2-set类型数据的拓展操作" class="headerlink" title="3.4.2 set类型数据的拓展操作"></a>3.4.2 set类型数据的拓展操作</h3><ul><li>随机获取集合中指定数量的数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure><ul><li>随机获取集合中的某个数据并将该数据移出集合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure><ul><li>求两个集合的交、并、差集</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinter key1 [key2]</span><br><span class="line">sunion key1 [key2]</span><br><span class="line">sdiff key1 [key2]</span><br></pre></td></tr></table></figure><ul><li>求两集合的交、并、差集并存储到指定集合中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinterstore destination key1 [key2]</span><br><span class="line">sunionstore destination key1 [key2]</span><br><span class="line">sdiffstore destination key1 [key2]</span><br></pre></td></tr></table></figure><ul><li>将指定数据从原始集合中移动到目标集合中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smove source destination member</span><br></pre></td></tr></table></figure><h2 id="3-5-sorted-set"><a href="#3-5-sorted-set" class="headerlink" title="3.5 sorted_set"></a>3.5 sorted_set</h2><p>sorted_set类型 : 在set的存储结构基础上添加可排序字段</p><p>图示 : </p><p><img src="/img/Redis/sorted_set.png" alt=""></p><h3 id="3-5-1-sorted-set-类型数据的基本操作"><a href="#3-5-1-sorted-set-类型数据的基本操作" class="headerlink" title="3.5.1 sorted_set 类型数据的基本操作"></a>3.5.1 sorted_set 类型数据的基本操作</h3><ul><li>添加数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 member1 [score2 member2]</span><br></pre></td></tr></table></figure><ul><li>获取全部数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrange key start stop [WITHSCORES]</span><br><span class="line">zrevrange key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem key member [member ...]</span><br></pre></td></tr></table></figure><ul><li>按条件获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max [WITHSCORES] [LIMIT]</span><br><span class="line">zrevrangebyscore key max min [WITHSCORES]</span><br></pre></td></tr></table></figure><ul><li>条件删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br><span class="line">zremrangebyscore key min max</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>min与max用于限定搜索查询的条件</p></li><li><p>start与stop用于限定查询范围，作用于索引，表示开始和结束索引 </p></li><li><p>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量 </p></li><li><p>获取集合数据总量</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zcard key </span><br><span class="line">zcount key min max</span><br></pre></td></tr></table></figure><ul><li>集合交、并操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zinterstore destination numkeys key [key ...] </span><br><span class="line">zunionstore destination numkeys key [key ...]</span><br></pre></td></tr></table></figure><h3 id="3-5-2-sorted-set类型数据的拓展操作"><a href="#3-5-2-sorted-set类型数据的拓展操作" class="headerlink" title="3.5.2 sorted_set类型数据的拓展操作"></a>3.5.2 sorted_set类型数据的拓展操作</h3><ul><li>获取数据对应的索引(排名)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure><ul><li>score值获取与修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zscore key member</span><br><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure><ul><li>获取当前系统时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://xiaozeng26.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Spring-rabbit的简单应用</title>
    <link href="https://xiaozeng26.github.io/2020/05/20/Spring-rabbit%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <id>https://xiaozeng26.github.io/2020/05/20/Spring-rabbit%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</id>
    <published>2020-05-20T14:50:24.000Z</published>
    <updated>2020-05-23T01:46:56.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-rabbit的简单应用"><a href="#Spring-rabbit的简单应用" class="headerlink" title="Spring-rabbit的简单应用"></a>Spring-rabbit的简单应用</h1><h2 id="1-创建Maven工程并导入依赖"><a href="#1-创建Maven工程并导入依赖" class="headerlink" title="1.创建Maven工程并导入依赖"></a>1.创建Maven工程并导入依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework.amqp/spring-rabbit --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.7.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="2-编写applicationContext-xml文件"><a href="#2-编写applicationContext-xml文件" class="headerlink" title="2. 编写applicationContext.xml文件"></a>2. 编写applicationContext.xml文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:rabbit=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/rabbit</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义RabbitMQ的连接工厂 --&gt;</span><br><span class="line">    &lt;rabbit:connection-factory</span><br><span class="line">            id=<span class="string">"connectionFactory"</span></span><br><span class="line">            host=<span class="string">"localhost"</span></span><br><span class="line">            port=<span class="string">"5672"</span></span><br><span class="line">            virtual-host=<span class="string">"host100"</span></span><br><span class="line">            username=<span class="string">"admin"</span></span><br><span class="line">            password=<span class="string">"admin"</span></span><br><span class="line">    /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义Rabbit模板，指定连接工厂以及定义exchange --&gt;</span><br><span class="line">    &lt;rabbit:template id=<span class="string">"rabbitTemplate"</span> connection-factory=<span class="string">"connectionFactory"</span> exchange=<span class="string">"fanoutExchange"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- MQ的管理，包括队列，交换机声明等 --&gt;</span><br><span class="line">    &lt;rabbit:admin connection-factory=<span class="string">"connectionFactory"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义交换机 --&gt;</span><br><span class="line">    &lt;rabbit:fanout-exchange name=<span class="string">"fanoutExchange"</span> auto-declare=<span class="string">"true"</span>&gt;</span><br><span class="line">        &lt;rabbit:bindings&gt;</span><br><span class="line">            &lt;rabbit:binding queue="fanout_Queue"&gt;&lt;/rabbit:binding&gt;</span><br><span class="line">        &lt;/rabbit:bindings&gt;</span><br><span class="line">    &lt;/rabbit:fanout-exchange&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义队列 --&gt;</span><br><span class="line">    &lt;rabbit:queue name=<span class="string">"fanout_Queue"</span> auto-declare=<span class="string">"true"</span> durable=<span class="string">"true"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 监听队列 --&gt;</span><br><span class="line">    &lt;rabbit:listener-container connection-factory=<span class="string">"connectionFactory"</span>&gt;</span><br><span class="line">        &lt;rabbit:listener queue-names="fanout_Queue" ref="consumer" method="listen"&gt;&lt;/rabbit:listener&gt;</span><br><span class="line">    &lt;/rabbit:listener-container&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 消费者 --&gt;</span><br><span class="line">    &lt;bean id="consumer" class="com.self.rabbitmq.springrabbit.SpringRabbitConsumer"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="3-读取配置文件，获取Rabbit模板对象-生产者"><a href="#3-读取配置文件，获取Rabbit模板对象-生产者" class="headerlink" title="3.读取配置文件，获取Rabbit模板对象(生产者)"></a>3.读取配置文件，获取Rabbit模板对象(生产者)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.rabbitmq.springrabbit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring-rabbit</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRabbitProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        ClassPathXmlApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取rabbitMQ模板</span></span><br><span class="line">        RabbitTemplate rabbitTemplate = app.getBean(<span class="string">"rabbitTemplate"</span>, RabbitTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"Hello Spring-rabbit"</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1秒</span></span><br><span class="line">        app.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-消费者"><a href="#4-消费者" class="headerlink" title="4. 消费者"></a>4. 消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.self.rabbitmq.springrabbit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring-Rabbit的消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRabbitConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String consumer)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"消费者 ： "</span> + consumer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出截图 : </p><p><img src="/img/RabbitMQ/SpringRabbit.png" alt=""></p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5.结论"></a>5.结论</h2><p>通过读取Spring的配置文件applicationContext.xml的形式，创建连接rabbitmq的连接工厂，并声明交换机与队列等。无需写大量的代码，只需要写配置文件即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="RabbitMQ" scheme="https://xiaozeng26.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的交换机说明</title>
    <link href="https://xiaozeng26.github.io/2020/05/20/RabbitMQ%E7%9A%84%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AF%B4%E6%98%8E/"/>
    <id>https://xiaozeng26.github.io/2020/05/20/RabbitMQ%E7%9A%84%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AF%B4%E6%98%8E/</id>
    <published>2020-05-20T11:23:05.000Z</published>
    <updated>2020-05-20T13:54:35.906Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RabbitMQ-的交换机-转发器"><a href="#RabbitMQ-的交换机-转发器" class="headerlink" title="RabbitMQ 的交换机(转发器)"></a>RabbitMQ 的交换机(转发器)</h1><p>定义 ：交换机/转发器一方面它接受生产者的消息，另一方面向队列推送消息。</p><p>在RabbitMQ中，有三种有三种类型的交换机 : </p><ul><li>Fanout Exchange(不处理路由键)</li><li>Direct Exchange(处理路由键)</li><li>Topic Exchange(将路由键和某模式进行匹配)</li></ul><h1 id="1-Fanout-Exchange"><a href="#1-Fanout-Exchange" class="headerlink" title="1. Fanout Exchange"></a>1. Fanout Exchange</h1><p>模型 : </p><p><img src="/img/RabbitMQ/Fanout_Exchange.png" alt=""></p><p>其实由上图就可以很容易的知道 ：只需要将队列与交换机进行绑定，生产者发送消息到队列上后，都会被转发到与该交换机绑定的所有队列上，这就是<strong>不处理路由键</strong>。</p><h1 id="2-Direct-Exchange"><a href="#2-Direct-Exchange" class="headerlink" title="2. Direct Exchange"></a>2. Direct Exchange</h1><p>模型 : </p><p><img src="/img/RabbitMQ/direct_exchange.png" alt=""> </p><p><strong>处理路由键</strong>，需要将队列与交换机进行绑定，，要求该消息与一个特定的路由键完全匹配，这是一个完整的匹配。</p><p>例如，如果一个队列绑定到该交换机上要求路由键”dog”,则只有被标记为”dog”的消息才回被转发。</p><h1 id="3-Topic-Exchange"><a href="#3-Topic-Exchange" class="headerlink" title="3. Topic Exchange"></a>3. Topic Exchange</h1><p>模型 : </p><p><img src="/img/RabbitMQ/Topic_Exchange.png" alt=""></p><p>将队列绑定到一个模式上。</p><p>“#” 匹配一个或多个词，</p><p>“*” 匹配一个词</p><p>就是说，生产者方routingKey = goods.add,存在有消费者1routingKey = good.delete,消费者2的routingKey = goods.#，那么消息只会被消费者2获取，消费者1无法获取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="RabbitMQ" scheme="https://xiaozeng26.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
